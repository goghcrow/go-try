//go:build !try

// Code generated by github.com/goghcrow/go-try DO NOT EDIT.
package test

import "go/ast"

func lhs_func_call_assign() (i int, err error) {
	𝘃𝗮𝗹𝟭 := id(&i)
	𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
	if 𝗲𝗿𝗿𝟭 != nil {
		err = 𝗲𝗿𝗿𝟭
		return
	}
	*𝘃𝗮𝗹𝟭 = 𝘃𝗮𝗹𝟮
	{
		𝘃𝗮𝗹𝟯 := id(&i)
		𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟮 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟮 != nil {
			err = 𝗲𝗿𝗿𝟮
			return
		}
		(*𝘃𝗮𝗹𝟯) = (𝘃𝗮𝗹𝟰)
	}
	return
}
func selector_assign_expr() error {
	type X struct{ x int }
	{
		var x X
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		x.x = 𝘃𝗮𝗹𝟭
	}
	{
		var x *X
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		x.x = 𝘃𝗮𝗹𝟮
	}
	{
		𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := ret1Err[*X]()
		if 𝗲𝗿𝗿𝟯 != nil {
			return 𝗲𝗿𝗿𝟯
		}
		𝘃𝗮𝗹𝟯.x = 42
	}
	{
		𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟰 := ret1Err[*X]()
		if 𝗲𝗿𝗿𝟰 != nil {
			return 𝗲𝗿𝗿𝟰
		}
		(𝘃𝗮𝗹𝟰.x) = 42
	}
	{
		𝘃𝗮𝗹𝟱 := id[*X](nil)
		𝘃𝗮𝗹𝟲, 𝗲𝗿𝗿𝟱 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟱 != nil {
			return 𝗲𝗿𝗿𝟱
		}
		𝘃𝗮𝗹𝟱.x = 𝘃𝗮𝗹𝟲
	}
	{
		𝘃𝗮𝗹𝟳, 𝗲𝗿𝗿𝟲 := ret1Err[*X]()
		if 𝗲𝗿𝗿𝟲 != nil {
			return 𝗲𝗿𝗿𝟲
		}
		𝘃𝗮𝗹𝟴, 𝗲𝗿𝗿𝟳 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟳 != nil {
			return 𝗲𝗿𝗿𝟳
		}
		𝘃𝗮𝗹𝟳.x = 𝘃𝗮𝗹𝟴
	}
	return nil
}
func index_assign_expr() error {
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[[]int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		𝘃𝗮𝗹𝟭[0] = 42
	}
	{
		𝘃𝗮𝗹𝟮 := id[[]int](nil)
		𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟮 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		𝘃𝗮𝗹𝟮[0] = 𝘃𝗮𝗹𝟯
	}
	{
		𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟯 := ret1Err[[]int]()
		if 𝗲𝗿𝗿𝟯 != nil {
			return 𝗲𝗿𝗿𝟯
		}
		𝘃𝗮𝗹𝟱, 𝗲𝗿𝗿𝟰 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟰 != nil {
			return 𝗲𝗿𝗿𝟰
		}
		𝘃𝗮𝗹𝟰[0] = 𝘃𝗮𝗹𝟱
	}
	{
		𝘃𝗮𝗹𝟲, 𝗲𝗿𝗿𝟱 := ret1Err[map[int]string]()
		if 𝗲𝗿𝗿𝟱 != nil {
			return 𝗲𝗿𝗿𝟱
		}
		𝘃𝗮𝗹𝟲[0] = "Hello"
	}
	{
		𝘃𝗮𝗹𝟳, 𝗲𝗿𝗿𝟲 := ret1Err[string]()
		if 𝗲𝗿𝗿𝟲 != nil {
			return 𝗲𝗿𝗿𝟲
		}
		map[int]string{}[0] = 𝘃𝗮𝗹𝟳
	}
	{
		𝘃𝗮𝗹𝟴, 𝗲𝗿𝗿𝟳 := ret1Err[map[int]string]()
		if 𝗲𝗿𝗿𝟳 != nil {
			return 𝗲𝗿𝗿𝟳
		}
		𝘃𝗮𝗹𝟵, 𝗲𝗿𝗿𝟴 := ret1Err[string]()
		if 𝗲𝗿𝗿𝟴 != nil {
			return 𝗲𝗿𝗿𝟴
		}
		𝘃𝗮𝗹𝟴[0] = 𝘃𝗮𝗹𝟵
	}
	return nil
}
func if_init_assign_expr() (err error) {
	type X struct{ x int }
	{
		{
			id[*X](nil).x = 42
			𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟭 != nil {
				err = 𝗲𝗿𝗿𝟭
				return
			}
			if 𝘃𝗮𝗹𝟭 {
			}
		}
	}
	{
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[*X]()
		if 𝗲𝗿𝗿𝟮 != nil {
			err = 𝗲𝗿𝗿𝟮
			return
		}
		if 𝘃𝗮𝗹𝟮.x = 42; id[bool](true) {
		}
	}
	{
		{
			𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := ret1Err[*X]()
			if 𝗲𝗿𝗿𝟯 != nil {
				err = 𝗲𝗿𝗿𝟯
				return
			}
			𝘃𝗮𝗹𝟯.x = 42
			𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟰 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟰 != nil {
				err = 𝗲𝗿𝗿𝟰
				return
			}
			if 𝘃𝗮𝗹𝟰 {
			}
		}
	}
	{
		{
			id[[]int](nil)[0] = 42
			𝘃𝗮𝗹𝟱, 𝗲𝗿𝗿𝟱 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟱 != nil {
				err = 𝗲𝗿𝗿𝟱
				return
			}
			if 𝘃𝗮𝗹𝟱 {
			}
		}
	}
	{
		𝘃𝗮𝗹𝟲, 𝗲𝗿𝗿𝟲 := ret1Err[[]int]()
		if 𝗲𝗿𝗿𝟲 != nil {
			err = 𝗲𝗿𝗿𝟲
			return
		}
		if 𝘃𝗮𝗹𝟲[0] = 42; id[bool](true) {
		}
	}
	{
		{
			𝘃𝗮𝗹𝟳, 𝗲𝗿𝗿𝟳 := ret1Err[[]int]()
			if 𝗲𝗿𝗿𝟳 != nil {
				err = 𝗲𝗿𝗿𝟳
				return
			}
			𝘃𝗮𝗹𝟳[0] = 42
			𝘃𝗮𝗹𝟴, 𝗲𝗿𝗿𝟴 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟴 != nil {
				err = 𝗲𝗿𝗿𝟴
				return
			}
			if 𝘃𝗮𝗹𝟴 {
			}
		}
	}
	{
		{
			map[int]string{}[0] = "hello"
			𝘃𝗮𝗹𝟵, 𝗲𝗿𝗿𝟵 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟵 != nil {
				err = 𝗲𝗿𝗿𝟵
				return
			}
			if 𝘃𝗮𝗹𝟵 {
			}
		}
	}
	{
		𝘃𝗮𝗹𝟭𝟬, 𝗲𝗿𝗿𝟭𝟬 := ret1Err[map[int]string]()
		if 𝗲𝗿𝗿𝟭𝟬 != nil {
			err = 𝗲𝗿𝗿𝟭𝟬
			return
		}
		if 𝘃𝗮𝗹𝟭𝟬[0] = "hello"; id[bool](true) {
		}
	}
	{
		{
			𝘃𝗮𝗹𝟭𝟭, 𝗲𝗿𝗿𝟭𝟭 := ret1Err[map[int]string]()
			if 𝗲𝗿𝗿𝟭𝟭 != nil {
				err = 𝗲𝗿𝗿𝟭𝟭
				return
			}
			𝘃𝗮𝗹𝟭𝟭[0] = "hello"
			𝘃𝗮𝗹𝟭𝟮, 𝗲𝗿𝗿𝟭𝟮 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟭𝟮 != nil {
				err = 𝗲𝗿𝗿𝟭𝟮
				return
			}
			if 𝘃𝗮𝗹𝟭𝟮 {
			}
		}
	}
	return nil
}
func switch_init_assign_expr() (err error) {
	type X struct{ x int }
	{
		{
			id[*X](nil).x = 42
			𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟭 != nil {
				err = 𝗲𝗿𝗿𝟭
				return
			}
			switch 𝘃𝗮𝗹𝟭 {
			}
		}
	}
	{
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[*X]()
		if 𝗲𝗿𝗿𝟮 != nil {
			err = 𝗲𝗿𝗿𝟮
			return
		}
		switch 𝘃𝗮𝗹𝟮.x = 42; id[int](42) {
		}
	}
	{
		{
			𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := ret1Err[*X]()
			if 𝗲𝗿𝗿𝟯 != nil {
				err = 𝗲𝗿𝗿𝟯
				return
			}
			𝘃𝗮𝗹𝟯.x = 42
			𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟰 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟰 != nil {
				err = 𝗲𝗿𝗿𝟰
				return
			}
			switch 𝘃𝗮𝗹𝟰 {
			}
		}
	}
	{
		{
			id[[]int](nil)[0] = 42
			𝘃𝗮𝗹𝟱, 𝗲𝗿𝗿𝟱 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟱 != nil {
				err = 𝗲𝗿𝗿𝟱
				return
			}
			switch 𝘃𝗮𝗹𝟱 {
			}
		}
	}
	{
		𝘃𝗮𝗹𝟲, 𝗲𝗿𝗿𝟲 := ret1Err[[]int]()
		if 𝗲𝗿𝗿𝟲 != nil {
			err = 𝗲𝗿𝗿𝟲
			return
		}
		switch 𝘃𝗮𝗹𝟲[0] = 42; id[int](42) {
		}
	}
	{
		{
			𝘃𝗮𝗹𝟳, 𝗲𝗿𝗿𝟳 := ret1Err[[]int]()
			if 𝗲𝗿𝗿𝟳 != nil {
				err = 𝗲𝗿𝗿𝟳
				return
			}
			𝘃𝗮𝗹𝟳[0] = 42
			𝘃𝗮𝗹𝟴, 𝗲𝗿𝗿𝟴 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟴 != nil {
				err = 𝗲𝗿𝗿𝟴
				return
			}
			switch 𝘃𝗮𝗹𝟴 {
			}
		}
	}
	{
		{
			map[int]string{}[0] = "hello"
			𝘃𝗮𝗹𝟵, 𝗲𝗿𝗿𝟵 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟵 != nil {
				err = 𝗲𝗿𝗿𝟵
				return
			}
			switch 𝘃𝗮𝗹𝟵 {
			}
		}
	}
	{
		𝘃𝗮𝗹𝟭𝟬, 𝗲𝗿𝗿𝟭𝟬 := ret1Err[map[int]string]()
		if 𝗲𝗿𝗿𝟭𝟬 != nil {
			err = 𝗲𝗿𝗿𝟭𝟬
			return
		}
		switch 𝘃𝗮𝗹𝟭𝟬[0] = "hello"; id[int](42) {
		}
	}
	{
		{
			𝘃𝗮𝗹𝟭𝟭, 𝗲𝗿𝗿𝟭𝟭 := ret1Err[map[int]string]()
			if 𝗲𝗿𝗿𝟭𝟭 != nil {
				err = 𝗲𝗿𝗿𝟭𝟭
				return
			}
			𝘃𝗮𝗹𝟭𝟭[0] = "hello"
			𝘃𝗮𝗹𝟭𝟮, 𝗲𝗿𝗿𝟭𝟮 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟭𝟮 != nil {
				err = 𝗲𝗿𝗿𝟭𝟮
				return
			}
			switch 𝘃𝗮𝗹𝟭𝟮 {
			}
		}
	}
	return nil
}
func type_switch_init_assign_expr() (err error) {
	type X struct{ x int }
	{
		{
			id[*X](nil).x = 42
			𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[ast.Node]()
			if 𝗲𝗿𝗿𝟭 != nil {
				err = 𝗲𝗿𝗿𝟭
				return
			}
			switch n := 𝘃𝗮𝗹𝟭.(type) {
			default:
				_ = n
			}
		}
	}
	{
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[*X]()
		if 𝗲𝗿𝗿𝟮 != nil {
			err = 𝗲𝗿𝗿𝟮
			return
		}
		switch 𝘃𝗮𝗹𝟮.x = 42; n := ast.Node(nil).(type) {
		default:
			_ = n
		}
	}
	{
		{
			𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := ret1Err[*X]()
			if 𝗲𝗿𝗿𝟯 != nil {
				err = 𝗲𝗿𝗿𝟯
				return
			}
			𝘃𝗮𝗹𝟯.x = 42
			𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟰 := ret1Err[ast.Node]()
			if 𝗲𝗿𝗿𝟰 != nil {
				err = 𝗲𝗿𝗿𝟰
				return
			}
			switch n := 𝘃𝗮𝗹𝟰.(type) {
			default:
				_ = n
			}
		}
	}
	{
		{
			id[[]int](nil)[0] = 42
			𝘃𝗮𝗹𝟱, 𝗲𝗿𝗿𝟱 := ret1Err[ast.Node]()
			if 𝗲𝗿𝗿𝟱 != nil {
				err = 𝗲𝗿𝗿𝟱
				return
			}
			switch n := 𝘃𝗮𝗹𝟱.(type) {
			default:
				_ = n
			}
		}
	}
	{
		𝘃𝗮𝗹𝟲, 𝗲𝗿𝗿𝟲 := ret1Err[[]int]()
		if 𝗲𝗿𝗿𝟲 != nil {
			err = 𝗲𝗿𝗿𝟲
			return
		}
		switch 𝘃𝗮𝗹𝟲[0] = 42; n := ast.Node(nil).(type) {
		default:
			_ = n
		}
	}
	{
		{
			𝘃𝗮𝗹𝟳, 𝗲𝗿𝗿𝟳 := ret1Err[[]int]()
			if 𝗲𝗿𝗿𝟳 != nil {
				err = 𝗲𝗿𝗿𝟳
				return
			}
			𝘃𝗮𝗹𝟳[0] = 42
			𝘃𝗮𝗹𝟴, 𝗲𝗿𝗿𝟴 := ret1Err[ast.Node]()
			if 𝗲𝗿𝗿𝟴 != nil {
				err = 𝗲𝗿𝗿𝟴
				return
			}
			switch n := 𝘃𝗮𝗹𝟴.(type) {
			default:
				_ = n
			}
		}
	}
	{
		{
			map[int]string{}[0] = "hello"
			𝘃𝗮𝗹𝟵, 𝗲𝗿𝗿𝟵 := ret1Err[ast.Node]()
			if 𝗲𝗿𝗿𝟵 != nil {
				err = 𝗲𝗿𝗿𝟵
				return
			}
			switch n := 𝘃𝗮𝗹𝟵.(type) {
			default:
				_ = n
			}
		}
	}
	{
		𝘃𝗮𝗹𝟭𝟬, 𝗲𝗿𝗿𝟭𝟬 := ret1Err[map[int]string]()
		if 𝗲𝗿𝗿𝟭𝟬 != nil {
			err = 𝗲𝗿𝗿𝟭𝟬
			return
		}
		switch 𝘃𝗮𝗹𝟭𝟬[0] = "hello"; n := ast.Node(nil).(type) {
		default:
			_ = n
		}
	}
	{
		{
			𝘃𝗮𝗹𝟭𝟭, 𝗲𝗿𝗿𝟭𝟭 := ret1Err[map[int]string]()
			if 𝗲𝗿𝗿𝟭𝟭 != nil {
				err = 𝗲𝗿𝗿𝟭𝟭
				return
			}
			𝘃𝗮𝗹𝟭𝟭[0] = "hello"
			𝘃𝗮𝗹𝟭𝟮, 𝗲𝗿𝗿𝟭𝟮 := ret1Err[ast.Node]()
			if 𝗲𝗿𝗿𝟭𝟮 != nil {
				err = 𝗲𝗿𝗿𝟭𝟮
				return
			}
			switch n := 𝘃𝗮𝗹𝟭𝟮.(type) {
			default:
				_ = n
			}
		}
	}
	return nil
}
func for_switch_init_assign_expr() (err error) {
	type X struct{ x int }
	{
		for id[*X](nil).x = 42; ; {
			𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟭 != nil {
				err = 𝗲𝗿𝗿𝟭
				return
			}
			if !𝘃𝗮𝗹𝟭 {
				break
			}
		}
	}
	{
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[*X]()
		if 𝗲𝗿𝗿𝟮 != nil {
			err = 𝗲𝗿𝗿𝟮
			return
		}
		for 𝘃𝗮𝗹𝟮.x = 42; id[bool](true); {
		}
	}
	{
		𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := ret1Err[*X]()
		if 𝗲𝗿𝗿𝟯 != nil {
			err = 𝗲𝗿𝗿𝟯
			return
		}
		for 𝘃𝗮𝗹𝟯.x = 42; ; {
			𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟰 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟰 != nil {
				err = 𝗲𝗿𝗿𝟰
				return
			}
			if !𝘃𝗮𝗹𝟰 {
				break
			}
		}
	}
	{
		for id[[]int](nil)[0] = 42; ; {
			𝘃𝗮𝗹𝟱, 𝗲𝗿𝗿𝟱 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟱 != nil {
				err = 𝗲𝗿𝗿𝟱
				return
			}
			if !𝘃𝗮𝗹𝟱 {
				break
			}
		}
	}
	{
		𝘃𝗮𝗹𝟲, 𝗲𝗿𝗿𝟲 := ret1Err[[]int]()
		if 𝗲𝗿𝗿𝟲 != nil {
			err = 𝗲𝗿𝗿𝟲
			return
		}
		for 𝘃𝗮𝗹𝟲[0] = 42; id[bool](true); {
		}
	}
	{
		𝘃𝗮𝗹𝟳, 𝗲𝗿𝗿𝟳 := ret1Err[[]int]()
		if 𝗲𝗿𝗿𝟳 != nil {
			err = 𝗲𝗿𝗿𝟳
			return
		}
		for 𝘃𝗮𝗹𝟳[0] = 42; ; {
			𝘃𝗮𝗹𝟴, 𝗲𝗿𝗿𝟴 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟴 != nil {
				err = 𝗲𝗿𝗿𝟴
				return
			}
			if !𝘃𝗮𝗹𝟴 {
				break
			}
		}
	}
	{
		for map[int]string{}[0] = "hello"; ; {
			𝘃𝗮𝗹𝟵, 𝗲𝗿𝗿𝟵 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟵 != nil {
				err = 𝗲𝗿𝗿𝟵
				return
			}
			if !𝘃𝗮𝗹𝟵 {
				break
			}
		}
	}
	{
		𝘃𝗮𝗹𝟭𝟬, 𝗲𝗿𝗿𝟭𝟬 := ret1Err[map[int]string]()
		if 𝗲𝗿𝗿𝟭𝟬 != nil {
			err = 𝗲𝗿𝗿𝟭𝟬
			return
		}
		for 𝘃𝗮𝗹𝟭𝟬[0] = "hello"; id[bool](true); {
		}
	}
	{
		𝘃𝗮𝗹𝟭𝟭, 𝗲𝗿𝗿𝟭𝟭 := ret1Err[map[int]string]()
		if 𝗲𝗿𝗿𝟭𝟭 != nil {
			err = 𝗲𝗿𝗿𝟭𝟭
			return
		}
		for 𝘃𝗮𝗹𝟭𝟭[0] = "hello"; ; {
			𝘃𝗮𝗹𝟭𝟮, 𝗲𝗿𝗿𝟭𝟮 := ret1Err[bool]()
			if 𝗲𝗿𝗿𝟭𝟮 != nil {
				err = 𝗲𝗿𝗿𝟭𝟮
				return
			}
			if !𝘃𝗮𝗹𝟭𝟮 {
				break
			}
		}
	}
	return nil
}
