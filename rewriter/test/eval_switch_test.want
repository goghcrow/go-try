//go:build !try

// Code generated by github.com/goghcrow/go-try DO NOT EDIT.
package test

func assert(cond bool, msg string) {
	if !cond {
		print("assertion fail: ", msg, "\n")
		panic(1)
	}
}
func testSwitchStmt() (err error) {
	i5 := 5
	i7 := 7
	hello := "hello"
	{
		𝘃𝗮𝗹𝟭𝟳, 𝗲𝗿𝗿𝟭 := lit(true)
		if 𝗲𝗿𝗿𝟭 != nil {
			err = 𝗲𝗿𝗿𝟭
			return
		}
		𝘃𝗮𝗹𝟭 := 𝘃𝗮𝗹𝟭𝟳
		𝘃𝗮𝗹𝟭𝟴, 𝗲𝗿𝗿𝟮 := lit(i5)
		if 𝗲𝗿𝗿𝟮 != nil {
			err = 𝗲𝗿𝗿𝟮
			return
		}
		if 𝘃𝗮𝗹𝟭 == (𝘃𝗮𝗹𝟭𝟴 < 5) {
			assert(false, "<")
		} else {
			𝘃𝗮𝗹𝟭𝟵, 𝗲𝗿𝗿𝟯 := lit(i5)
			if 𝗲𝗿𝗿𝟯 != nil {
				err = 𝗲𝗿𝗿𝟯
				return
			}
			if 𝘃𝗮𝗹𝟭 == (𝘃𝗮𝗹𝟭𝟵 == 5) {
				assert(true, "!")
			} else {
				𝘃𝗮𝗹𝟮𝟬, 𝗲𝗿𝗿𝟰 := lit(i5)
				if 𝗲𝗿𝗿𝟰 != nil {
					err = 𝗲𝗿𝗿𝟰
					return
				}
				if 𝘃𝗮𝗹𝟭 == (𝘃𝗮𝗹𝟮𝟬 > 5) {
					assert(false, ">")
				}
			}
		}
	}
	{
		𝘃𝗮𝗹𝟮𝟭, 𝗲𝗿𝗿𝟱 := lit(5)
		if 𝗲𝗿𝗿𝟱 != nil {
			err = 𝗲𝗿𝗿𝟱
			return
		}
		if i5 < 𝘃𝗮𝗹𝟮𝟭 {
			assert(false, "<")
		} else {
			𝘃𝗮𝗹𝟮𝟮, 𝗲𝗿𝗿𝟲 := lit(5)
			if 𝗲𝗿𝗿𝟲 != nil {
				err = 𝗲𝗿𝗿𝟲
				return
			}
			if i5 == 𝘃𝗮𝗹𝟮𝟮 {
				assert(true, "!")
			} else {
				𝘃𝗮𝗹𝟮𝟯, 𝗲𝗿𝗿𝟳 := lit(5)
				if 𝗲𝗿𝗿𝟳 != nil {
					err = 𝗲𝗿𝗿𝟳
					return
				}
				if i5 > 𝘃𝗮𝗹𝟮𝟯 {
					assert(false, ">")
				}
			}
		}
	}
	{
		𝘃𝗮𝗹𝟮𝟰, 𝗲𝗿𝗿𝟴 := lit(5)
		if 𝗲𝗿𝗿𝟴 != nil {
			err = 𝗲𝗿𝗿𝟴
			return
		}
		x := 𝘃𝗮𝗹𝟮𝟰
		𝘃𝗮𝗹𝟮𝟱, 𝗲𝗿𝗿𝟵 := lit(true)
		if 𝗲𝗿𝗿𝟵 != nil {
			err = 𝗲𝗿𝗿𝟵
			return
		}
		𝘃𝗮𝗹𝟮 := 𝘃𝗮𝗹𝟮𝟱
		𝘃𝗮𝗹𝟮𝟲, 𝗲𝗿𝗿𝟭𝟬 := lit(i5)
		if 𝗲𝗿𝗿𝟭𝟬 != nil {
			err = 𝗲𝗿𝗿𝟭𝟬
			return
		}
		if 𝘃𝗮𝗹𝟮 == (𝘃𝗮𝗹𝟮𝟲 < x) {
			assert(false, "<")
		} else {
			𝘃𝗮𝗹𝟮𝟳, 𝗲𝗿𝗿𝟭𝟭 := lit(i5)
			if 𝗲𝗿𝗿𝟭𝟭 != nil {
				err = 𝗲𝗿𝗿𝟭𝟭
				return
			}
			if 𝘃𝗮𝗹𝟮 == (𝘃𝗮𝗹𝟮𝟳 == x) {
				assert(true, "!")
			} else {
				𝘃𝗮𝗹𝟮𝟴, 𝗲𝗿𝗿𝟭𝟮 := lit(i5)
				if 𝗲𝗿𝗿𝟭𝟮 != nil {
					err = 𝗲𝗿𝗿𝟭𝟮
					return
				}
				if 𝘃𝗮𝗹𝟮 == (𝘃𝗮𝗹𝟮𝟴 > x) {
					assert(false, ">")
				}
			}
		}
	}
	{
		𝘃𝗮𝗹𝟮𝟵, 𝗲𝗿𝗿𝟭𝟯 := lit(5)
		if 𝗲𝗿𝗿𝟭𝟯 != nil {
			err = 𝗲𝗿𝗿𝟭𝟯
			return
		}
		x := 𝘃𝗮𝗹𝟮𝟵
		𝘃𝗮𝗹𝟯𝟬, 𝗲𝗿𝗿𝟭𝟰 := lit(true)
		if 𝗲𝗿𝗿𝟭𝟰 != nil {
			err = 𝗲𝗿𝗿𝟭𝟰
			return
		}
		𝘃𝗮𝗹𝟯 := 𝘃𝗮𝗹𝟯𝟬
		𝘃𝗮𝗹𝟯𝟭, 𝗲𝗿𝗿𝟭𝟱 := lit(x)
		if 𝗲𝗿𝗿𝟭𝟱 != nil {
			err = 𝗲𝗿𝗿𝟭𝟱
			return
		}
		if 𝘃𝗮𝗹𝟯 == (i5 < 𝘃𝗮𝗹𝟯𝟭) {
			assert(false, "<")
		} else {
			𝘃𝗮𝗹𝟯𝟮, 𝗲𝗿𝗿𝟭𝟲 := lit(x)
			if 𝗲𝗿𝗿𝟭𝟲 != nil {
				err = 𝗲𝗿𝗿𝟭𝟲
				return
			}
			if 𝘃𝗮𝗹𝟯 == (i5 == 𝘃𝗮𝗹𝟯𝟮) {
				assert(true, "!")
			} else {
				𝘃𝗮𝗹𝟯𝟯, 𝗲𝗿𝗿𝟭𝟳 := lit(x)
				if 𝗲𝗿𝗿𝟭𝟳 != nil {
					err = 𝗲𝗿𝗿𝟭𝟳
					return
				}
				if 𝘃𝗮𝗹𝟯 == (i5 > 𝘃𝗮𝗹𝟯𝟯) {
					assert(false, ">")
				}
			}
		}
	}
	{
		𝘃𝗮𝗹𝟯𝟰, 𝗲𝗿𝗿𝟭𝟴 := lit(i5)
		if 𝗲𝗿𝗿𝟭𝟴 != nil {
			err = 𝗲𝗿𝗿𝟭𝟴
			return
		}
		𝘃𝗮𝗹𝟰 := 𝘃𝗮𝗹𝟯𝟰
		𝘃𝗮𝗹𝟯𝟱, 𝗲𝗿𝗿𝟭𝟵 := lit(0)
		if 𝗲𝗿𝗿𝟭𝟵 != nil {
			err = 𝗲𝗿𝗿𝟭𝟵
			return
		}
		if 𝘃𝗮𝗹𝟰 == 𝘃𝗮𝗹𝟯𝟱 {
			assert(false, "0")
		} else {
			𝘃𝗮𝗹𝟯𝟲, 𝗲𝗿𝗿𝟮𝟬 := lit(1)
			if 𝗲𝗿𝗿𝟮𝟬 != nil {
				err = 𝗲𝗿𝗿𝟮𝟬
				return
			}
			if 𝘃𝗮𝗹𝟰 == 𝘃𝗮𝗹𝟯𝟲 {
				assert(false, "1")
			} else {
				𝘃𝗮𝗹𝟯𝟳, 𝗲𝗿𝗿𝟮𝟭 := lit(2)
				if 𝗲𝗿𝗿𝟮𝟭 != nil {
					err = 𝗲𝗿𝗿𝟮𝟭
					return
				}
				if 𝘃𝗮𝗹𝟰 == 𝘃𝗮𝗹𝟯𝟳 {
					assert(false, "2")
				} else {
					𝘃𝗮𝗹𝟯𝟴, 𝗲𝗿𝗿𝟮𝟮 := lit(3)
					if 𝗲𝗿𝗿𝟮𝟮 != nil {
						err = 𝗲𝗿𝗿𝟮𝟮
						return
					}
					if 𝘃𝗮𝗹𝟰 == 𝘃𝗮𝗹𝟯𝟴 {
						assert(false, "3")
					} else {
						𝘃𝗮𝗹𝟯𝟵, 𝗲𝗿𝗿𝟮𝟯 := lit(4)
						if 𝗲𝗿𝗿𝟮𝟯 != nil {
							err = 𝗲𝗿𝗿𝟮𝟯
							return
						}
						if 𝘃𝗮𝗹𝟰 == 𝘃𝗮𝗹𝟯𝟵 {
							assert(false, "4")
						} else {
							𝘃𝗮𝗹𝟰𝟬, 𝗲𝗿𝗿𝟮𝟰 := lit(5)
							if 𝗲𝗿𝗿𝟮𝟰 != nil {
								err = 𝗲𝗿𝗿𝟮𝟰
								return
							}
							if 𝘃𝗮𝗹𝟰 == 𝘃𝗮𝗹𝟰𝟬 {
								assert(true, "5")
							} else {
								𝘃𝗮𝗹𝟰𝟭, 𝗲𝗿𝗿𝟮𝟱 := lit(6)
								if 𝗲𝗿𝗿𝟮𝟱 != nil {
									err = 𝗲𝗿𝗿𝟮𝟱
									return
								}
								if 𝘃𝗮𝗹𝟰 == 𝘃𝗮𝗹𝟰𝟭 {
									assert(false, "6")
								} else {
									𝘃𝗮𝗹𝟰𝟮, 𝗲𝗿𝗿𝟮𝟲 := lit(7)
									if 𝗲𝗿𝗿𝟮𝟲 != nil {
										err = 𝗲𝗿𝗿𝟮𝟲
										return
									}
									if 𝘃𝗮𝗹𝟰 == 𝘃𝗮𝗹𝟰𝟮 {
										assert(false, "7")
									} else {
										𝘃𝗮𝗹𝟰𝟯, 𝗲𝗿𝗿𝟮𝟳 := lit(8)
										if 𝗲𝗿𝗿𝟮𝟳 != nil {
											err = 𝗲𝗿𝗿𝟮𝟳
											return
										}
										if 𝘃𝗮𝗹𝟰 == 𝘃𝗮𝗹𝟰𝟯 {
											assert(false, "8")
										} else {
											𝘃𝗮𝗹𝟰𝟰, 𝗲𝗿𝗿𝟮𝟴 := lit(9)
											if 𝗲𝗿𝗿𝟮𝟴 != nil {
												err = 𝗲𝗿𝗿𝟮𝟴
												return
											}
											if 𝘃𝗮𝗹𝟰 == 𝘃𝗮𝗹𝟰𝟰 {
												assert(false, "9")
											} else {
												assert(false, "default")
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	{
		𝘃𝗮𝗹𝟰𝟱, 𝗲𝗿𝗿𝟮𝟵 := lit(i5)
		if 𝗲𝗿𝗿𝟮𝟵 != nil {
			err = 𝗲𝗿𝗿𝟮𝟵
			return
		}
		𝘃𝗮𝗹𝟱 := 𝘃𝗮𝗹𝟰𝟱
		𝘃𝗮𝗹𝟰𝟲, 𝗲𝗿𝗿𝟯𝟬 := lit(0)
		if 𝗲𝗿𝗿𝟯𝟬 != nil {
			err = 𝗲𝗿𝗿𝟯𝟬
			return
		}
		𝘃𝗮𝗹𝟰𝟳 := 𝘃𝗮𝗹𝟱 == 𝘃𝗮𝗹𝟰𝟲
		𝘃𝗮𝗹𝟰𝟵 := 𝘃𝗮𝗹𝟰𝟳 || 𝘃𝗮𝗹𝟱 == 1
		if !𝘃𝗮𝗹𝟰𝟵 {
			𝘃𝗮𝗹𝟰𝟴, 𝗲𝗿𝗿𝟯𝟭 := lit(2)
			if 𝗲𝗿𝗿𝟯𝟭 != nil {
				err = 𝗲𝗿𝗿𝟯𝟭
				return
			}
			𝘃𝗮𝗹𝟰𝟵 = 𝘃𝗮𝗹𝟱 == 𝘃𝗮𝗹𝟰𝟴
		}
		if !𝘃𝗮𝗹𝟰𝟵 {
			𝘃𝗮𝗹𝟱𝟬, 𝗲𝗿𝗿𝟯𝟮 := lit(3)
			if 𝗲𝗿𝗿𝟯𝟮 != nil {
				err = 𝗲𝗿𝗿𝟯𝟮
				return
			}
			𝘃𝗮𝗹𝟰𝟵 = 𝘃𝗮𝗹𝟱 == 𝘃𝗮𝗹𝟱𝟬
		}
		if 𝘃𝗮𝗹𝟰𝟵 || 𝘃𝗮𝗹𝟱 == 4 {
			assert(false, "4")
		} else {
			𝘃𝗮𝗹𝟱𝟭, 𝗲𝗿𝗿𝟯𝟯 := lit(5)
			if 𝗲𝗿𝗿𝟯𝟯 != nil {
				err = 𝗲𝗿𝗿𝟯𝟯
				return
			}
			if 𝘃𝗮𝗹𝟱 == 𝘃𝗮𝗹𝟱𝟭 {
				assert(true, "5")
			} else {
				𝘃𝗮𝗹𝟱𝟮, 𝗲𝗿𝗿𝟯𝟰 := lit(7)
				if 𝗲𝗿𝗿𝟯𝟰 != nil {
					err = 𝗲𝗿𝗿𝟯𝟰
					return
				}
				𝘃𝗮𝗹𝟱𝟯 := 𝘃𝗮𝗹𝟱 == 6 || 𝘃𝗮𝗹𝟱 == 𝘃𝗮𝗹𝟱𝟮
				𝘃𝗮𝗹𝟱𝟱 := 𝘃𝗮𝗹𝟱𝟯 || 𝘃𝗮𝗹𝟱 == 8
				if !𝘃𝗮𝗹𝟱𝟱 {
					𝘃𝗮𝗹𝟱𝟰, 𝗲𝗿𝗿𝟯𝟱 := lit(9)
					if 𝗲𝗿𝗿𝟯𝟱 != nil {
						err = 𝗲𝗿𝗿𝟯𝟱
						return
					}
					𝘃𝗮𝗹𝟱𝟱 = 𝘃𝗮𝗹𝟱 == 𝘃𝗮𝗹𝟱𝟰
				}
				if 𝘃𝗮𝗹𝟱𝟱 {
					assert(false, "9")
				} else {
					assert(false, "default")
				}
			}
		}
	}
	{
		𝘃𝗮𝗹𝟱𝟲, 𝗲𝗿𝗿𝟯𝟲 := lit(i5)
		if 𝗲𝗿𝗿𝟯𝟲 != nil {
			err = 𝗲𝗿𝗿𝟯𝟲
			return
		}
		𝘃𝗮𝗹𝟲 := 𝘃𝗮𝗹𝟱𝟲
		𝘃𝗮𝗹𝟱𝟳, 𝗲𝗿𝗿𝟯𝟳 := lit(0)
		if 𝗲𝗿𝗿𝟯𝟳 != nil {
			err = 𝗲𝗿𝗿𝟯𝟳
			return
		}
		if 𝘃𝗮𝗹𝟲 == 𝘃𝗮𝗹𝟱𝟳 {
		} else if 𝘃𝗮𝗹𝟲 == 1 {
		} else {
			𝘃𝗮𝗹𝟱𝟴, 𝗲𝗿𝗿𝟯𝟴 := lit(2)
			if 𝗲𝗿𝗿𝟯𝟴 != nil {
				err = 𝗲𝗿𝗿𝟯𝟴
				return
			}
			if 𝘃𝗮𝗹𝟲 == 𝘃𝗮𝗹𝟱𝟴 {
			} else if 𝘃𝗮𝗹𝟲 == 3 {
			} else {
				𝘃𝗮𝗹𝟱𝟵, 𝗲𝗿𝗿𝟯𝟵 := lit(4)
				if 𝗲𝗿𝗿𝟯𝟵 != nil {
					err = 𝗲𝗿𝗿𝟯𝟵
					return
				}
				if 𝘃𝗮𝗹𝟲 == 𝘃𝗮𝗹𝟱𝟵 {
					assert(false, "4")
				} else if 𝘃𝗮𝗹𝟲 == 5 {
					assert(true, "5")
				} else {
					𝘃𝗮𝗹𝟲𝟬, 𝗲𝗿𝗿𝟰𝟬 := lit(6)
					if 𝗲𝗿𝗿𝟰𝟬 != nil {
						err = 𝗲𝗿𝗿𝟰𝟬
						return
					}
					if 𝘃𝗮𝗹𝟲 == 𝘃𝗮𝗹𝟲𝟬 {
					} else if 𝘃𝗮𝗹𝟲 == 7 {
					} else {
						𝘃𝗮𝗹𝟲𝟭, 𝗲𝗿𝗿𝟰𝟭 := lit(8)
						if 𝗲𝗿𝗿𝟰𝟭 != nil {
							err = 𝗲𝗿𝗿𝟰𝟭
							return
						}
						if 𝘃𝗮𝗹𝟲 == 𝘃𝗮𝗹𝟲𝟭 {
						} else if 𝘃𝗮𝗹𝟲 == 9 {
						} else {
							assert(i5 == 5, "good")
						}
					}
				}
			}
		}
	}
	{
		𝘃𝗮𝗹𝟲𝟮, 𝗲𝗿𝗿𝟰𝟮 := lit(i5)
		if 𝗲𝗿𝗿𝟰𝟮 != nil {
			err = 𝗲𝗿𝗿𝟰𝟮
			return
		}
		𝘃𝗮𝗹𝟳 := 𝘃𝗮𝗹𝟲𝟮
		𝘃𝗮𝗹𝟲𝟯, 𝗲𝗿𝗿𝟰𝟯 := lit(0)
		if 𝗲𝗿𝗿𝟰𝟯 != nil {
			err = 𝗲𝗿𝗿𝟰𝟯
			return
		}
		if 𝘃𝗮𝗹𝟳 == 𝘃𝗮𝗹𝟲𝟯 {
			{
				dummy := 0
				_ = dummy
			}
			{
				dummy := 0
				_ = dummy
			}
			{
				dummy := 0
				_ = dummy
			}
			{
				dummy := 0
				_ = dummy
			}
			{
				dummy := 0
				_ = dummy
				assert(false, "4")
			}
		} else {
			𝘃𝗮𝗹𝟲𝟰, 𝗲𝗿𝗿𝟰𝟰 := lit(1)
			if 𝗲𝗿𝗿𝟰𝟰 != nil {
				err = 𝗲𝗿𝗿𝟰𝟰
				return
			}
			if 𝘃𝗮𝗹𝟳 == 𝘃𝗮𝗹𝟲𝟰 {
				{
					dummy := 0
					_ = dummy
				}
				{
					dummy := 0
					_ = dummy
				}
				{
					dummy := 0
					_ = dummy
				}
				{
					dummy := 0
					_ = dummy
					assert(false, "4")
				}
			} else {
				𝘃𝗮𝗹𝟲𝟱, 𝗲𝗿𝗿𝟰𝟱 := lit(2)
				if 𝗲𝗿𝗿𝟰𝟱 != nil {
					err = 𝗲𝗿𝗿𝟰𝟱
					return
				}
				if 𝘃𝗮𝗹𝟳 == 𝘃𝗮𝗹𝟲𝟱 {
					{
						dummy := 0
						_ = dummy
					}
					{
						dummy := 0
						_ = dummy
					}
					{
						dummy := 0
						_ = dummy
						assert(false, "4")
					}
				} else {
					𝘃𝗮𝗹𝟲𝟲, 𝗲𝗿𝗿𝟰𝟲 := lit(3)
					if 𝗲𝗿𝗿𝟰𝟲 != nil {
						err = 𝗲𝗿𝗿𝟰𝟲
						return
					}
					if 𝘃𝗮𝗹𝟳 == 𝘃𝗮𝗹𝟲𝟲 {
						{
							dummy := 0
							_ = dummy
						}
						{
							dummy := 0
							_ = dummy
							assert(false, "4")
						}
					} else {
						𝘃𝗮𝗹𝟲𝟳, 𝗲𝗿𝗿𝟰𝟳 := lit(4)
						if 𝗲𝗿𝗿𝟰𝟳 != nil {
							err = 𝗲𝗿𝗿𝟰𝟳
							return
						}
						if 𝘃𝗮𝗹𝟳 == 𝘃𝗮𝗹𝟲𝟳 {
							dummy := 0
							_ = dummy
							assert(false, "4")
						} else {
							𝘃𝗮𝗹𝟲𝟴, 𝗲𝗿𝗿𝟰𝟴 := lit(5)
							if 𝗲𝗿𝗿𝟰𝟴 != nil {
								err = 𝗲𝗿𝗿𝟰𝟴
								return
							}
							if 𝘃𝗮𝗹𝟳 == 𝘃𝗮𝗹𝟲𝟴 {
								{
									dummy := 0
									_ = dummy
								}
								{
									dummy := 0
									_ = dummy
								}
								{
									dummy := 0
									_ = dummy
								}
								{
									dummy := 0
									_ = dummy
								}
								{
									dummy := 0
									_ = dummy
								}
								{
									dummy := 0
									_ = dummy
									assert(i5 == 5, "good")
								}
							} else {
								𝘃𝗮𝗹𝟲𝟵, 𝗲𝗿𝗿𝟰𝟵 := lit(6)
								if 𝗲𝗿𝗿𝟰𝟵 != nil {
									err = 𝗲𝗿𝗿𝟰𝟵
									return
								}
								if 𝘃𝗮𝗹𝟳 == 𝘃𝗮𝗹𝟲𝟵 {
									{
										dummy := 0
										_ = dummy
									}
									{
										dummy := 0
										_ = dummy
									}
									{
										dummy := 0
										_ = dummy
									}
									{
										dummy := 0
										_ = dummy
									}
									{
										dummy := 0
										_ = dummy
										assert(i5 == 5, "good")
									}
								} else {
									𝘃𝗮𝗹𝟳𝟬, 𝗲𝗿𝗿𝟱𝟬 := lit(7)
									if 𝗲𝗿𝗿𝟱𝟬 != nil {
										err = 𝗲𝗿𝗿𝟱𝟬
										return
									}
									if 𝘃𝗮𝗹𝟳 == 𝘃𝗮𝗹𝟳𝟬 {
										{
											dummy := 0
											_ = dummy
										}
										{
											dummy := 0
											_ = dummy
										}
										{
											dummy := 0
											_ = dummy
										}
										{
											dummy := 0
											_ = dummy
											assert(i5 == 5, "good")
										}
									} else {
										𝘃𝗮𝗹𝟳𝟭, 𝗲𝗿𝗿𝟱𝟭 := lit(8)
										if 𝗲𝗿𝗿𝟱𝟭 != nil {
											err = 𝗲𝗿𝗿𝟱𝟭
											return
										}
										if 𝘃𝗮𝗹𝟳 == 𝘃𝗮𝗹𝟳𝟭 {
											{
												dummy := 0
												_ = dummy
											}
											{
												dummy := 0
												_ = dummy
											}
											{
												dummy := 0
												_ = dummy
												assert(i5 == 5, "good")
											}
										} else {
											𝘃𝗮𝗹𝟳𝟮, 𝗲𝗿𝗿𝟱𝟮 := lit(9)
											if 𝗲𝗿𝗿𝟱𝟮 != nil {
												err = 𝗲𝗿𝗿𝟱𝟮
												return
											}
											if 𝘃𝗮𝗹𝟳 == 𝘃𝗮𝗹𝟳𝟮 {
												{
													dummy := 0
													_ = dummy
												}
												{
													dummy := 0
													_ = dummy
													assert(i5 == 5, "good")
												}
											} else {
												dummy := 0
												_ = dummy
												assert(i5 == 5, "good")
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	fired := false
	{
		𝘃𝗮𝗹𝟳𝟯, 𝗲𝗿𝗿𝟱𝟯 := lit(i5)
		if 𝗲𝗿𝗿𝟱𝟯 != nil {
			err = 𝗲𝗿𝗿𝟱𝟯
			return
		}
		𝘃𝗮𝗹𝟴 := 𝘃𝗮𝗹𝟳𝟯
		𝘃𝗮𝗹𝟳𝟰, 𝗲𝗿𝗿𝟱𝟰 := lit(0)
		if 𝗲𝗿𝗿𝟱𝟰 != nil {
			err = 𝗲𝗿𝗿𝟱𝟰
			return
		}
		if 𝘃𝗮𝗹𝟴 == 𝘃𝗮𝗹𝟳𝟰 {
			{
				dummy := 0
				_ = dummy
			}
			{
				dummy := 0
				_ = dummy
			}
			{
				dummy := 0
				_ = dummy
			}
			{
				dummy := 0
				_ = dummy
			}
			{
				dummy := 0
				_ = dummy
				assert(false, "4")
			}
		} else {
			𝘃𝗮𝗹𝟳𝟱, 𝗲𝗿𝗿𝟱𝟱 := lit(1)
			if 𝗲𝗿𝗿𝟱𝟱 != nil {
				err = 𝗲𝗿𝗿𝟱𝟱
				return
			}
			if 𝘃𝗮𝗹𝟴 == 𝘃𝗮𝗹𝟳𝟱 {
				{
					dummy := 0
					_ = dummy
				}
				{
					dummy := 0
					_ = dummy
				}
				{
					dummy := 0
					_ = dummy
				}
				{
					dummy := 0
					_ = dummy
					assert(false, "4")
				}
			} else {
				𝘃𝗮𝗹𝟳𝟲, 𝗲𝗿𝗿𝟱𝟲 := lit(2)
				if 𝗲𝗿𝗿𝟱𝟲 != nil {
					err = 𝗲𝗿𝗿𝟱𝟲
					return
				}
				if 𝘃𝗮𝗹𝟴 == 𝘃𝗮𝗹𝟳𝟲 {
					{
						dummy := 0
						_ = dummy
					}
					{
						dummy := 0
						_ = dummy
					}
					{
						dummy := 0
						_ = dummy
						assert(false, "4")
					}
				} else {
					𝘃𝗮𝗹𝟳𝟳, 𝗲𝗿𝗿𝟱𝟳 := lit(3)
					if 𝗲𝗿𝗿𝟱𝟳 != nil {
						err = 𝗲𝗿𝗿𝟱𝟳
						return
					}
					if 𝘃𝗮𝗹𝟴 == 𝘃𝗮𝗹𝟳𝟳 {
						{
							dummy := 0
							_ = dummy
						}
						{
							dummy := 0
							_ = dummy
							assert(false, "4")
						}
					} else {
						𝘃𝗮𝗹𝟳𝟴, 𝗲𝗿𝗿𝟱𝟴 := lit(4)
						if 𝗲𝗿𝗿𝟱𝟴 != nil {
							err = 𝗲𝗿𝗿𝟱𝟴
							return
						}
						if 𝘃𝗮𝗹𝟴 == 𝘃𝗮𝗹𝟳𝟴 {
							dummy := 0
							_ = dummy
							assert(false, "4")
						} else {
							𝘃𝗮𝗹𝟳𝟵, 𝗲𝗿𝗿𝟱𝟵 := lit(5)
							if 𝗲𝗿𝗿𝟱𝟵 != nil {
								err = 𝗲𝗿𝗿𝟱𝟵
								return
							}
							if 𝘃𝗮𝗹𝟴 == 𝘃𝗮𝗹𝟳𝟵 {
								{
									dummy := 0
									_ = dummy
								}
								{
									dummy := 0
									_ = dummy
								}
								{
									dummy := 0
									_ = dummy
								}
								{
									dummy := 0
									_ = dummy
								}
								{
									dummy := 0
									_ = dummy
								}
								{
									dummy := 0
									_ = dummy
									fired = !fired
									assert(i5 == 5, "good")
								}
							} else {
								𝘃𝗮𝗹𝟴𝟬, 𝗲𝗿𝗿𝟲𝟬 := lit(6)
								if 𝗲𝗿𝗿𝟲𝟬 != nil {
									err = 𝗲𝗿𝗿𝟲𝟬
									return
								}
								if 𝘃𝗮𝗹𝟴 == 𝘃𝗮𝗹𝟴𝟬 {
									{
										dummy := 0
										_ = dummy
									}
									{
										dummy := 0
										_ = dummy
									}
									{
										dummy := 0
										_ = dummy
									}
									{
										dummy := 0
										_ = dummy
									}
									{
										dummy := 0
										_ = dummy
										fired = !fired
										assert(i5 == 5, "good")
									}
								} else {
									𝘃𝗮𝗹𝟴𝟭, 𝗲𝗿𝗿𝟲𝟭 := lit(7)
									if 𝗲𝗿𝗿𝟲𝟭 != nil {
										err = 𝗲𝗿𝗿𝟲𝟭
										return
									}
									if 𝘃𝗮𝗹𝟴 == 𝘃𝗮𝗹𝟴𝟭 {
										{
											dummy := 0
											_ = dummy
										}
										{
											dummy := 0
											_ = dummy
										}
										{
											dummy := 0
											_ = dummy
										}
										{
											dummy := 0
											_ = dummy
											fired = !fired
											assert(i5 == 5, "good")
										}
									} else {
										𝘃𝗮𝗹𝟴𝟮, 𝗲𝗿𝗿𝟲𝟮 := lit(8)
										if 𝗲𝗿𝗿𝟲𝟮 != nil {
											err = 𝗲𝗿𝗿𝟲𝟮
											return
										}
										if 𝘃𝗮𝗹𝟴 == 𝘃𝗮𝗹𝟴𝟮 {
											{
												dummy := 0
												_ = dummy
											}
											{
												dummy := 0
												_ = dummy
											}
											{
												dummy := 0
												_ = dummy
												fired = !fired
												assert(i5 == 5, "good")
											}
										} else {
											𝘃𝗮𝗹𝟴𝟯, 𝗲𝗿𝗿𝟲𝟯 := lit(9)
											if 𝗲𝗿𝗿𝟲𝟯 != nil {
												err = 𝗲𝗿𝗿𝟲𝟯
												return
											}
											if 𝘃𝗮𝗹𝟴 == 𝘃𝗮𝗹𝟴𝟯 {
												{
													dummy := 0
													_ = dummy
												}
												{
													dummy := 0
													_ = dummy
													fired = !fired
													assert(i5 == 5, "good")
												}
											} else {
												dummy := 0
												_ = dummy
												fired = !fired
												assert(i5 == 5, "good")
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	assert(fired, "fired")
	count := 0
	{
		𝘃𝗮𝗹𝟴𝟰, 𝗲𝗿𝗿𝟲𝟰 := lit(i5)
		if 𝗲𝗿𝗿𝟲𝟰 != nil {
			err = 𝗲𝗿𝗿𝟲𝟰
			return
		}
		𝘃𝗮𝗹𝟵 := 𝘃𝗮𝗹𝟴𝟰
		𝘃𝗮𝗹𝟴𝟱, 𝗲𝗿𝗿𝟲𝟱 := lit(0)
		if 𝗲𝗿𝗿𝟲𝟱 != nil {
			err = 𝗲𝗿𝗿𝟲𝟱
			return
		}
		if 𝘃𝗮𝗹𝟵 == 𝘃𝗮𝗹𝟴𝟱 {
			{
				count = count + 1
			}
			{
				count = count + 1
			}
			{
				count = count + 1
			}
			{
				count = count + 1
			}
			{
				count = count + 1
				assert(false, "4")
			}
		} else {
			𝘃𝗮𝗹𝟴𝟲, 𝗲𝗿𝗿𝟲𝟲 := lit(1)
			if 𝗲𝗿𝗿𝟲𝟲 != nil {
				err = 𝗲𝗿𝗿𝟲𝟲
				return
			}
			if 𝘃𝗮𝗹𝟵 == 𝘃𝗮𝗹𝟴𝟲 {
				{
					count = count + 1
				}
				{
					count = count + 1
				}
				{
					count = count + 1
				}
				{
					count = count + 1
					assert(false, "4")
				}
			} else {
				𝘃𝗮𝗹𝟴𝟳, 𝗲𝗿𝗿𝟲𝟳 := lit(2)
				if 𝗲𝗿𝗿𝟲𝟳 != nil {
					err = 𝗲𝗿𝗿𝟲𝟳
					return
				}
				if 𝘃𝗮𝗹𝟵 == 𝘃𝗮𝗹𝟴𝟳 {
					{
						count = count + 1
					}
					{
						count = count + 1
					}
					{
						count = count + 1
						assert(false, "4")
					}
				} else {
					𝘃𝗮𝗹𝟴𝟴, 𝗲𝗿𝗿𝟲𝟴 := lit(3)
					if 𝗲𝗿𝗿𝟲𝟴 != nil {
						err = 𝗲𝗿𝗿𝟲𝟴
						return
					}
					if 𝘃𝗮𝗹𝟵 == 𝘃𝗮𝗹𝟴𝟴 {
						{
							count = count + 1
						}
						{
							count = count + 1
							assert(false, "4")
						}
					} else {
						𝘃𝗮𝗹𝟴𝟵, 𝗲𝗿𝗿𝟲𝟵 := lit(4)
						if 𝗲𝗿𝗿𝟲𝟵 != nil {
							err = 𝗲𝗿𝗿𝟲𝟵
							return
						}
						if 𝘃𝗮𝗹𝟵 == 𝘃𝗮𝗹𝟴𝟵 {
							count = count + 1
							assert(false, "4")
						} else {
							𝘃𝗮𝗹𝟵𝟬, 𝗲𝗿𝗿𝟳𝟬 := lit(5)
							if 𝗲𝗿𝗿𝟳𝟬 != nil {
								err = 𝗲𝗿𝗿𝟳𝟬
								return
							}
							if 𝘃𝗮𝗹𝟵 == 𝘃𝗮𝗹𝟵𝟬 {
								{
									count = count + 1
								}
								{
									count = count + 1
								}
								{
									count = count + 1
								}
								{
									count = count + 1
								}
								{
									count = count + 1
								}
								{
									assert(i5 == count, "good")
								}
							} else {
								𝘃𝗮𝗹𝟵𝟭, 𝗲𝗿𝗿𝟳𝟭 := lit(6)
								if 𝗲𝗿𝗿𝟳𝟭 != nil {
									err = 𝗲𝗿𝗿𝟳𝟭
									return
								}
								if 𝘃𝗮𝗹𝟵 == 𝘃𝗮𝗹𝟵𝟭 {
									{
										count = count + 1
									}
									{
										count = count + 1
									}
									{
										count = count + 1
									}
									{
										count = count + 1
									}
									{
										assert(i5 == count, "good")
									}
								} else {
									𝘃𝗮𝗹𝟵𝟮, 𝗲𝗿𝗿𝟳𝟮 := lit(7)
									if 𝗲𝗿𝗿𝟳𝟮 != nil {
										err = 𝗲𝗿𝗿𝟳𝟮
										return
									}
									if 𝘃𝗮𝗹𝟵 == 𝘃𝗮𝗹𝟵𝟮 {
										{
											count = count + 1
										}
										{
											count = count + 1
										}
										{
											count = count + 1
										}
										{
											assert(i5 == count, "good")
										}
									} else {
										𝘃𝗮𝗹𝟵𝟯, 𝗲𝗿𝗿𝟳𝟯 := lit(8)
										if 𝗲𝗿𝗿𝟳𝟯 != nil {
											err = 𝗲𝗿𝗿𝟳𝟯
											return
										}
										if 𝘃𝗮𝗹𝟵 == 𝘃𝗮𝗹𝟵𝟯 {
											{
												count = count + 1
											}
											{
												count = count + 1
											}
											{
												assert(i5 == count, "good")
											}
										} else {
											𝘃𝗮𝗹𝟵𝟰, 𝗲𝗿𝗿𝟳𝟰 := lit(9)
											if 𝗲𝗿𝗿𝟳𝟰 != nil {
												err = 𝗲𝗿𝗿𝟳𝟰
												return
											}
											if 𝘃𝗮𝗹𝟵 == 𝘃𝗮𝗹𝟵𝟰 {
												{
													count = count + 1
												}
												{
													assert(i5 == count, "good")
												}
											} else {
												assert(i5 == count, "good")
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	assert(fired, "fired")
	{
		𝘃𝗮𝗹𝟵𝟱, 𝗲𝗿𝗿𝟳𝟱 := lit(hello)
		if 𝗲𝗿𝗿𝟳𝟱 != nil {
			err = 𝗲𝗿𝗿𝟳𝟱
			return
		}
		𝘃𝗮𝗹𝟭𝟬 := 𝘃𝗮𝗹𝟵𝟱
		if 𝘃𝗮𝗹𝟭𝟬 == "wowie" {
			assert(false, "wowie")
		} else {
			𝘃𝗮𝗹𝟵𝟲, 𝗲𝗿𝗿𝟳𝟲 := lit("hello")
			if 𝗲𝗿𝗿𝟳𝟲 != nil {
				err = 𝗲𝗿𝗿𝟳𝟲
				return
			}
			if 𝘃𝗮𝗹𝟭𝟬 == 𝘃𝗮𝗹𝟵𝟲 {
				assert(true, "hello")
			} else {
				𝘃𝗮𝗹𝟵𝟳, 𝗲𝗿𝗿𝟳𝟳 := lit("jumpn")
				if 𝗲𝗿𝗿𝟳𝟳 != nil {
					err = 𝗲𝗿𝗿𝟳𝟳
					return
				}
				if 𝘃𝗮𝗹𝟭𝟬 == 𝘃𝗮𝗹𝟵𝟳 {
					assert(false, "jumpn")
				} else {
					assert(false, "default")
				}
			}
		}
	}
	fired = false
	{
		𝘃𝗮𝗹𝟵𝟴, 𝗲𝗿𝗿𝟳𝟴 := lit(2)
		if 𝗲𝗿𝗿𝟳𝟴 != nil {
			err = 𝗲𝗿𝗿𝟳𝟴
			return
		}
		i := i5 + 𝘃𝗮𝗹𝟵𝟴
		𝘃𝗮𝗹𝟵𝟵, 𝗲𝗿𝗿𝟳𝟵 := lit(i)
		if 𝗲𝗿𝗿𝟳𝟵 != nil {
			err = 𝗲𝗿𝗿𝟳𝟵
			return
		}
		𝘃𝗮𝗹𝟭𝟭 := 𝘃𝗮𝗹𝟵𝟵
		𝘃𝗮𝗹𝟭𝟬𝟬, 𝗲𝗿𝗿𝟴𝟬 := lit(i7)
		if 𝗲𝗿𝗿𝟴𝟬 != nil {
			err = 𝗲𝗿𝗿𝟴𝟬
			return
		}
		if 𝘃𝗮𝗹𝟭𝟭 == 𝘃𝗮𝗹𝟭𝟬𝟬 {
			fired = true
		} else {
			assert(false, "fail")
		}
	}
	assert(fired, "var")
	𝘃𝗮𝗹𝟭𝟬𝟭, 𝗲𝗿𝗿𝟴𝟭 := lit(func() {  })
	if 𝗲𝗿𝗿𝟴𝟭 != nil {
		err = 𝗲𝗿𝗿𝟴𝟭
		return
	}
	switch f := 𝘃𝗮𝗹𝟭𝟬𝟭; f {
	case nil:
		assert(false, "f should not be nil")
	default:
	}
	{
		m := make(map[int]int)
		𝘃𝗮𝗹𝟭𝟬𝟮, 𝗲𝗿𝗿𝟴𝟮 := lit(m)
		if 𝗲𝗿𝗿𝟴𝟮 != nil {
			err = 𝗲𝗿𝗿𝟴𝟮
			return
		}
		switch 𝘃𝗮𝗹𝟭𝟬𝟮 {
		case nil:
			assert(false, "m should not be nil")
		default:
		}
	}
	𝘃𝗮𝗹𝟭𝟬𝟯, 𝗲𝗿𝗿𝟴𝟯 := lit(1)
	if 𝗲𝗿𝗿𝟴𝟯 != nil {
		err = 𝗲𝗿𝗿𝟴𝟯
		return
	}
	𝘃𝗮𝗹𝟭𝟬𝟰 := make([]int, 𝘃𝗮𝗹𝟭𝟬𝟯)
	switch a := 𝘃𝗮𝗹𝟭𝟬𝟰; a {
	case nil:
		assert(false, "m should not be nil")
	default:
	}
	{
		i := interface{}("hello")
		𝘃𝗮𝗹𝟭𝟮 := i
		𝘃𝗮𝗹𝟭𝟬𝟱, 𝗲𝗿𝗿𝟴𝟰 := lit(42)
		if 𝗲𝗿𝗿𝟴𝟰 != nil {
			err = 𝗲𝗿𝗿𝟴𝟰
			return
		}
		if 𝘃𝗮𝗹𝟭𝟮 == 𝘃𝗮𝗹𝟭𝟬𝟱 {
			assert(false, `i should be "hello"`)
		} else {
			𝘃𝗮𝗹𝟭𝟬𝟲, 𝗲𝗿𝗿𝟴𝟱 := lit("hello")
			if 𝗲𝗿𝗿𝟴𝟱 != nil {
				err = 𝗲𝗿𝗿𝟴𝟱
				return
			}
			if 𝘃𝗮𝗹𝟭𝟮 == 𝘃𝗮𝗹𝟭𝟬𝟲 {
				assert(true, "hello")
			} else {
				assert(false, `i should be "hello"`)
			}
		}
	}
	{
		i := interface{}(true)
		𝘃𝗮𝗹𝟭𝟬𝟳, 𝗲𝗿𝗿𝟴𝟲 := lit(i)
		if 𝗲𝗿𝗿𝟴𝟲 != nil {
			err = 𝗲𝗿𝗿𝟴𝟲
			return
		}
		if (42 == 42) == 𝘃𝗮𝗹𝟭𝟬𝟳 {
			assert(true, "true")
		} else {
			𝘃𝗮𝗹𝟭𝟬𝟴, 𝗲𝗿𝗿𝟴𝟳 := lit(false)
			if 𝗲𝗿𝗿𝟴𝟳 != nil {
				err = 𝗲𝗿𝗿𝟴𝟳
				return
			}
			if 𝘃𝗮𝗹𝟭𝟬𝟴 {
				assert(false, "i should be true")
			} else {
				assert(false, "i should be true")
			}
		}
	}
	type T int
	type B bool
	type F float64
	type S string
	{
		i := interface{}(float64(1.0))
		𝘃𝗮𝗹𝟭𝟯 := i
		if 𝘃𝗮𝗹𝟭𝟯 == nil {
			assert(false, "i should be float64(1.0)")
		} else {
			𝘃𝗮𝗹𝟭𝟬𝟵 := (*int)(nil)
			𝘃𝗮𝗹𝟭𝟭𝟬, 𝗲𝗿𝗿𝟴𝟴 := lit(𝘃𝗮𝗹𝟭𝟬𝟵)
			if 𝗲𝗿𝗿𝟴𝟴 != nil {
				err = 𝗲𝗿𝗿𝟴𝟴
				return
			}
			if 𝘃𝗮𝗹𝟭𝟯 == 𝘃𝗮𝗹𝟭𝟭𝟬 {
				assert(false, "i should be float64(1.0)")
			} else {
				𝘃𝗮𝗹𝟭𝟭𝟭, 𝗲𝗿𝗿𝟴𝟵 := lit(1)
				if 𝗲𝗿𝗿𝟴𝟵 != nil {
					err = 𝗲𝗿𝗿𝟴𝟵
					return
				}
				if 𝘃𝗮𝗹𝟭𝟯 == 𝘃𝗮𝗹𝟭𝟭𝟭 {
					assert(false, "i should be float64(1.0)")
				} else {
					𝘃𝗮𝗹𝟭𝟭𝟮 := T(1)
					𝘃𝗮𝗹𝟭𝟭𝟯, 𝗲𝗿𝗿𝟵𝟬 := lit(𝘃𝗮𝗹𝟭𝟭𝟮)
					if 𝗲𝗿𝗿𝟵𝟬 != nil {
						err = 𝗲𝗿𝗿𝟵𝟬
						return
					}
					if 𝘃𝗮𝗹𝟭𝟯 == 𝘃𝗮𝗹𝟭𝟭𝟯 {
						assert(false, "i should be float64(1.0)")
					} else {
						𝘃𝗮𝗹𝟭𝟭𝟰 := F(1.0)
						𝘃𝗮𝗹𝟭𝟭𝟱, 𝗲𝗿𝗿𝟵𝟭 := lit(𝘃𝗮𝗹𝟭𝟭𝟰)
						if 𝗲𝗿𝗿𝟵𝟭 != nil {
							err = 𝗲𝗿𝗿𝟵𝟭
							return
						}
						if 𝘃𝗮𝗹𝟭𝟯 == 𝘃𝗮𝗹𝟭𝟭𝟱 {
							assert(false, "i should be float64(1.0)")
						} else {
							𝘃𝗮𝗹𝟭𝟭𝟲, 𝗲𝗿𝗿𝟵𝟮 := lit(1.0)
							if 𝗲𝗿𝗿𝟵𝟮 != nil {
								err = 𝗲𝗿𝗿𝟵𝟮
								return
							}
							if 𝘃𝗮𝗹𝟭𝟯 == 𝘃𝗮𝗹𝟭𝟭𝟲 {
								assert(true, "true")
							} else {
								𝘃𝗮𝗹𝟭𝟭𝟳, 𝗲𝗿𝗿𝟵𝟯 := lit("hello")
								if 𝗲𝗿𝗿𝟵𝟯 != nil {
									err = 𝗲𝗿𝗿𝟵𝟯
									return
								}
								if 𝘃𝗮𝗹𝟭𝟯 == 𝘃𝗮𝗹𝟭𝟭𝟳 {
									assert(false, "i should be float64(1.0)")
								} else {
									𝘃𝗮𝗹𝟭𝟭𝟴 := S("hello")
									𝘃𝗮𝗹𝟭𝟭𝟵, 𝗲𝗿𝗿𝟵𝟰 := lit(𝘃𝗮𝗹𝟭𝟭𝟴)
									if 𝗲𝗿𝗿𝟵𝟰 != nil {
										err = 𝗲𝗿𝗿𝟵𝟰
										return
									}
									if 𝘃𝗮𝗹𝟭𝟯 == 𝘃𝗮𝗹𝟭𝟭𝟵 {
										assert(false, "i should be float64(1.0)")
									} else {
										𝘃𝗮𝗹𝟭𝟮𝟬 := B(false)
										𝘃𝗮𝗹𝟭𝟮𝟭, 𝗲𝗿𝗿𝟵𝟱 := lit(𝘃𝗮𝗹𝟭𝟮𝟬)
										if 𝗲𝗿𝗿𝟵𝟱 != nil {
											err = 𝗲𝗿𝗿𝟵𝟱
											return
										}
										if 𝘃𝗮𝗹𝟭𝟯 == true || 𝘃𝗮𝗹𝟭𝟯 == 𝘃𝗮𝗹𝟭𝟮𝟭 {
											assert(false, "i should be float64(1.0)")
										} else {
											𝘃𝗮𝗹𝟭𝟮𝟮 := B(true)
											𝘃𝗮𝗹𝟭𝟮𝟯, 𝗲𝗿𝗿𝟵𝟲 := lit(𝘃𝗮𝗹𝟭𝟮𝟮)
											if 𝗲𝗿𝗿𝟵𝟲 != nil {
												err = 𝗲𝗿𝗿𝟵𝟲
												return
											}
											if 𝘃𝗮𝗹𝟭𝟯 == false || 𝘃𝗮𝗹𝟭𝟯 == 𝘃𝗮𝗹𝟭𝟮𝟯 {
												assert(false, "i should be float64(1.0)")
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	{
		𝘃𝗮𝗹𝟭𝟮𝟰, 𝗲𝗿𝗿𝟵𝟳 := lit(3)
		if 𝗲𝗿𝗿𝟵𝟳 != nil {
			err = 𝗲𝗿𝗿𝟵𝟳
			return
		}
		ar := [3]int{1, 2, 𝘃𝗮𝗹𝟭𝟮𝟰}
		𝘃𝗮𝗹𝟭𝟰 := ar
		𝘃𝗮𝗹𝟭𝟮𝟱, 𝗲𝗿𝗿𝟵𝟴 := lit(3)
		if 𝗲𝗿𝗿𝟵𝟴 != nil {
			err = 𝗲𝗿𝗿𝟵𝟴
			return
		}
		𝘃𝗮𝗹𝟭𝟮𝟲, 𝗲𝗿𝗿𝟵𝟵 := lit([3]int{1, 2, 𝘃𝗮𝗹𝟭𝟮𝟱})
		if 𝗲𝗿𝗿𝟵𝟵 != nil {
			err = 𝗲𝗿𝗿𝟵𝟵
			return
		}
		if 𝘃𝗮𝗹𝟭𝟰 == 𝘃𝗮𝗹𝟭𝟮𝟲 {
			assert(true, "[1 2 3]")
		} else {
			𝘃𝗮𝗹𝟭𝟮𝟳, 𝗲𝗿𝗿𝟭𝟬𝟬 := lit(6)
			if 𝗲𝗿𝗿𝟭𝟬𝟬 != nil {
				err = 𝗲𝗿𝗿𝟭𝟬𝟬
				return
			}
			𝘃𝗮𝗹𝟭𝟮𝟴, 𝗲𝗿𝗿𝟭𝟬𝟭 := lit([3]int{4, 5, 𝘃𝗮𝗹𝟭𝟮𝟳})
			if 𝗲𝗿𝗿𝟭𝟬𝟭 != nil {
				err = 𝗲𝗿𝗿𝟭𝟬𝟭
				return
			}
			if 𝘃𝗮𝗹𝟭𝟰 == 𝘃𝗮𝗹𝟭𝟮𝟴 {
				assert(false, "ar should be [1 2 3]")
			} else {
				assert(false, "ar should be [1 2 3]")
			}
		}
	}
	{
		𝘃𝗮𝗹𝟭𝟮𝟵 := make(chan int)
		𝘃𝗮𝗹𝟭𝟯𝟬 := make(chan int)
		𝘃𝗮𝗹𝟭𝟯𝟭, 𝗲𝗿𝗿𝟭𝟬𝟮 := lit(𝘃𝗮𝗹𝟭𝟯𝟬)
		if 𝗲𝗿𝗿𝟭𝟬𝟮 != nil {
			err = 𝗲𝗿𝗿𝟭𝟬𝟮
			return
		}
		c1, c2 := 𝘃𝗮𝗹𝟭𝟮𝟵, 𝘃𝗮𝗹𝟭𝟯𝟭
		𝘃𝗮𝗹𝟭𝟱 := c1
		if 𝘃𝗮𝗹𝟭𝟱 == nil {
			assert(false, "c1 did not match itself")
		} else {
			𝘃𝗮𝗹𝟭𝟯𝟮, 𝗲𝗿𝗿𝟭𝟬𝟯 := lit(c2)
			if 𝗲𝗿𝗿𝟭𝟬𝟯 != nil {
				err = 𝗲𝗿𝗿𝟭𝟬𝟯
				return
			}
			if 𝘃𝗮𝗹𝟭𝟱 == 𝘃𝗮𝗹𝟭𝟯𝟮 {
				assert(false, "c1 did not match itself")
			} else {
				𝘃𝗮𝗹𝟭𝟯𝟯, 𝗲𝗿𝗿𝟭𝟬𝟰 := lit(c1)
				if 𝗲𝗿𝗿𝟭𝟬𝟰 != nil {
					err = 𝗲𝗿𝗿𝟭𝟬𝟰
					return
				}
				if 𝘃𝗮𝗹𝟭𝟱 == 𝘃𝗮𝗹𝟭𝟯𝟯 {
					assert(true, "chan")
				} else {
					assert(false, "c1 did not match itself")
				}
			}
		}
	}
	switch {
	}
	fired = false
	switch {
	default:
		𝘃𝗮𝗹𝟭𝟯𝟰, 𝗲𝗿𝗿𝟭𝟬𝟱 := lit(true)
		if 𝗲𝗿𝗿𝟭𝟬𝟱 != nil {
			err = 𝗲𝗿𝗿𝟭𝟬𝟱
			return
		}
		fired = 𝘃𝗮𝗹𝟭𝟯𝟰
	}
	assert(fired, "fail")
	count = 0
	{
		𝘃𝗮𝗹𝟭𝟯𝟱, 𝗲𝗿𝗿𝟭𝟬𝟲 := lit(false)
		if 𝗲𝗿𝗿𝟭𝟬𝟲 != nil {
			err = 𝗲𝗿𝗿𝟭𝟬𝟲
			return
		}
		if 𝘃𝗮𝗹𝟭𝟯𝟱 {
			count++
		} else {
			{
				count++
			}
			{
				count++
			}
		}
	}
	assert(count == 2, "fail")
	count = 0
	{
		𝘃𝗮𝗹𝟭𝟯𝟲, 𝗲𝗿𝗿𝟭𝟬𝟳 := lit(i5)
		if 𝗲𝗿𝗿𝟭𝟬𝟳 != nil {
			err = 𝗲𝗿𝗿𝟭𝟬𝟳
			return
		}
		𝘃𝗮𝗹𝟭𝟲 := 𝘃𝗮𝗹𝟭𝟯𝟲
		𝘃𝗮𝗹𝟭𝟯𝟳, 𝗲𝗿𝗿𝟭𝟬𝟴 := lit(5)
		if 𝗲𝗿𝗿𝟭𝟬𝟴 != nil {
			err = 𝗲𝗿𝗿𝟭𝟬𝟴
			return
		}
		if 𝘃𝗮𝗹𝟭𝟲 == 𝘃𝗮𝗹𝟭𝟯𝟳 {
			{
				count++
			}
			{
				count++
			}
		} else {
			𝘃𝗮𝗹𝟭𝟯𝟴, 𝗲𝗿𝗿𝟭𝟬𝟵 := lit(6)
			if 𝗲𝗿𝗿𝟭𝟬𝟵 != nil {
				err = 𝗲𝗿𝗿𝟭𝟬𝟵
				return
			}
			if 𝘃𝗮𝗹𝟭𝟲 == 𝘃𝗮𝗹𝟭𝟯𝟴 {
				count++
			} else {
				count++
			}
		}
	}
	assert(count == 2, "fail")
	i := 0
	fired = false
	{
		x := 5
		if i < x {
			fired = true
		} else {
			𝘃𝗮𝗹𝟭𝟯𝟵, 𝗲𝗿𝗿𝟭𝟭𝟬 := lit(x)
			if 𝗲𝗿𝗿𝟭𝟭𝟬 != nil {
				err = 𝗲𝗿𝗿𝟭𝟭𝟬
				return
			}
			if i == 𝘃𝗮𝗹𝟭𝟯𝟵 {
				assert(false, "fail")
			} else {
				𝘃𝗮𝗹𝟭𝟰𝟬, 𝗲𝗿𝗿𝟭𝟭𝟭 := lit(i > x)
				if 𝗲𝗿𝗿𝟭𝟭𝟭 != nil {
					err = 𝗲𝗿𝗿𝟭𝟭𝟭
					return
				}
				if 𝘃𝗮𝗹𝟭𝟰𝟬 {
					assert(false, "fail")
				}
			}
		}
	}
	assert(fired, "fail")
	switch (*int)(nil) {
	case nil:
	case any(nil):
		assert(false, "case any(nil) matched")
	default:
		assert(false, "default matched")
	}
	return
}
