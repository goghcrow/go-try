//go:build !try

// Code generated by github.com/goghcrow/go-try DO NOT EDIT.
package test

func goto_label() error {
L:
	𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
	if 𝗲𝗿𝗿𝟭 != nil {
		return 𝗲𝗿𝗿𝟭
	}
	var a = 𝘃𝗮𝗹𝟭
	goto L
	println(a)
	return nil
}
func goto_label1() error {
	if true {
	} else {
	L:
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		var a = 𝘃𝗮𝗹𝟭
		goto L
		println(a)
	}
	return nil
}
func range_with_break() error {
	𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[[]int]()
	if 𝗲𝗿𝗿𝟭 != nil {
		return 𝗲𝗿𝗿𝟭
	}
L:
	for range 𝘃𝗮𝗹𝟭 {
		break L
	}
	return nil
}
func range_with_break1() error {
	𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[[]int]()
	if 𝗲𝗿𝗿𝟭 != nil {
		return 𝗲𝗿𝗿𝟭
	}
Outer:
	for range 𝘃𝗮𝗹𝟭 {
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[[]string]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
	Inner:
		for range 𝘃𝗮𝗹𝟮 {
			if true {
				break Inner
			}
			break Outer
		}
	}
	return nil
}
func range_with_goto() error {
L:
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[[]int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		for range 𝘃𝗮𝗹𝟭 {
			goto L
		}
	}
	return nil
}
func range_with_goto1() error {
Outer:
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[[]int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		for range 𝘃𝗮𝗹𝟭 {
		Inner:
			{
				𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[[]string]()
				if 𝗲𝗿𝗿𝟮 != nil {
					return 𝗲𝗿𝗿𝟮
				}
				for range 𝘃𝗮𝗹𝟮 {
					if true {
						goto Inner
					}
					goto Outer
				}
			}
		}
	}
	return nil
}
func range_with_break_goto(a int) error {
𝗟_𝗚𝗼𝘁𝗼_𝗢𝘂𝘁𝗲𝗿𝟭:
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[[]int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
	Outer:
		for range 𝘃𝗮𝗹𝟭 {
		𝗟_𝗚𝗼𝘁𝗼_𝗜𝗻𝗻𝗲𝗿𝟭:
			{
				𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[[]string]()
				if 𝗲𝗿𝗿𝟮 != nil {
					return 𝗲𝗿𝗿𝟮
				}
			Inner:
				for range 𝘃𝗮𝗹𝟮 {
					switch a {
					case 1:
						goto 𝗟_𝗚𝗼𝘁𝗼_𝗜𝗻𝗻𝗲𝗿𝟭
					case 2:
						goto 𝗟_𝗚𝗼𝘁𝗼_𝗢𝘂𝘁𝗲𝗿𝟭
					case 3:
						break Inner
					case 4:
						break Outer
					case 5:
						continue Inner
					case 6:
						continue Outer
					}
				}
			}
		}
	}
	return nil
}
func for_with_break() error {
	𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
	if 𝗲𝗿𝗿𝟭 != nil {
		return 𝗲𝗿𝗿𝟭
	}
	𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[[]int]()
	if 𝗲𝗿𝗿𝟮 != nil {
		return 𝗲𝗿𝗿𝟮
	}
L:
	for i, xs := 𝘃𝗮𝗹𝟭, 𝘃𝗮𝗹𝟮; i < 42; i++ {
		if xs[i] == 0 {
			break L
		}
	}
	return nil
}
func for_with_break1() error {
	𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
	if 𝗲𝗿𝗿𝟭 != nil {
		return 𝗲𝗿𝗿𝟭
	}
	𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[[]int]()
	if 𝗲𝗿𝗿𝟮 != nil {
		return 𝗲𝗿𝗿𝟮
	}
Outer:
	for i, xs := 𝘃𝗮𝗹𝟭, 𝘃𝗮𝗹𝟮; i < 42; i++ {
		𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟯 != nil {
			return 𝗲𝗿𝗿𝟯
		}
		𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟰 := ret1Err[[]int]()
		if 𝗲𝗿𝗿𝟰 != nil {
			return 𝗲𝗿𝗿𝟰
		}
	Inner:
		for j, ys := 𝘃𝗮𝗹𝟯, 𝘃𝗮𝗹𝟰; j < 42; j++ {
			if xs[i] == 0 {
				break Inner
			} else if ys[j] == 0 {
				break Outer
			}
		}
	}
	return nil
}
func for_with_goto() error {
L:
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[[]int]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		for i, xs := 𝘃𝗮𝗹𝟭, 𝘃𝗮𝗹𝟮; i < 42; i++ {
			if xs[i] == 0 {
				goto L
			}
		}
	}
	return nil
}
func for_with_goto1() error {
Outer:
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[[]int]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		for i, xs := 𝘃𝗮𝗹𝟭, 𝘃𝗮𝗹𝟮; i < 42; i++ {
		Inner:
			{
				𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := ret1Err[int]()
				if 𝗲𝗿𝗿𝟯 != nil {
					return 𝗲𝗿𝗿𝟯
				}
				𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟰 := ret1Err[[]int]()
				if 𝗲𝗿𝗿𝟰 != nil {
					return 𝗲𝗿𝗿𝟰
				}
				for j, ys := 𝘃𝗮𝗹𝟯, 𝘃𝗮𝗹𝟰; j < 42; j++ {
					if xs[i] == 0 {
						goto Inner
					} else if ys[j] == 0 {
						goto Outer
					}
				}
			}
		}
	}
	return nil
}
func for_with_break_goto(a int) error {
𝗟_𝗚𝗼𝘁𝗼_𝗢𝘂𝘁𝗲𝗿𝟭:
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[[]int]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
	Outer:
		for i, _ := 𝘃𝗮𝗹𝟭, 𝘃𝗮𝗹𝟮; i < 42; i++ {
		𝗟_𝗚𝗼𝘁𝗼_𝗜𝗻𝗻𝗲𝗿𝟭:
			{
				𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := ret1Err[int]()
				if 𝗲𝗿𝗿𝟯 != nil {
					return 𝗲𝗿𝗿𝟯
				}
				𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟰 := ret1Err[[]int]()
				if 𝗲𝗿𝗿𝟰 != nil {
					return 𝗲𝗿𝗿𝟰
				}
			Inner:
				for j, _ := 𝘃𝗮𝗹𝟯, 𝘃𝗮𝗹𝟰; j < 42; j++ {
					switch a {
					case 1:
						goto 𝗟_𝗚𝗼𝘁𝗼_𝗜𝗻𝗻𝗲𝗿𝟭
					case 2:
						goto 𝗟_𝗚𝗼𝘁𝗼_𝗢𝘂𝘁𝗲𝗿𝟭
					case 3:
						break Inner
					case 4:
						break Outer
					case 5:
						continue Inner
					case 6:
						continue Outer
					}
				}
			}
		}
	}
	return nil
}
func switch_with_break() error {
	𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
	if 𝗲𝗿𝗿𝟭 != nil {
		return 𝗲𝗿𝗿𝟭
	}
L:
	switch 𝘃𝗮𝗹𝟭 {
	case 42:
		break L
	}
	return nil
}
func switch_with_break1() error {
	𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
	if 𝗲𝗿𝗿𝟭 != nil {
		return 𝗲𝗿𝗿𝟭
	}
Outer:
	switch 𝘃𝗮𝗹𝟭 {
	case 42:
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
	Inner:
		switch 𝘃𝗮𝗹𝟮 {
		case 42:
			break Outer
		case 100:
			break Inner
		}
	}
	return nil
}
func switch_with_goto() error {
L:
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		switch 𝘃𝗮𝗹𝟭 {
		case 42:
			goto L
		}
	}
	return nil
}
func switch_with_goto1() error {
Outer:
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		switch 𝘃𝗮𝗹𝟭 {
		case 42:
		Inner:
			{
				𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[int]()
				if 𝗲𝗿𝗿𝟮 != nil {
					return 𝗲𝗿𝗿𝟮
				}
				switch 𝘃𝗮𝗹𝟮 {
				case 42:
					goto Outer
				case 100:
					goto Inner
				}
			}
		}
	}
	return nil
}
func switch_with_break_goto(a int) error {
𝗟_𝗚𝗼𝘁𝗼_𝗢𝘂𝘁𝗲𝗿𝟭:
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
	Outer:
		switch 𝘃𝗮𝗹𝟭 {
		case 42:
		𝗟_𝗚𝗼𝘁𝗼_𝗜𝗻𝗻𝗲𝗿𝟭:
			{
				𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[int]()
				if 𝗲𝗿𝗿𝟮 != nil {
					return 𝗲𝗿𝗿𝟮
				}
			Inner:
				switch 𝘃𝗮𝗹𝟮 {
				case 1:
					goto 𝗟_𝗚𝗼𝘁𝗼_𝗜𝗻𝗻𝗲𝗿𝟭
				case 2:
					goto 𝗟_𝗚𝗼𝘁𝗼_𝗢𝘂𝘁𝗲𝗿𝟭
				case 3:
					break Inner
				case 4:
					break Outer
				}
			}
		}
	}
	return nil
}
func select_with_break() error {
	𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[chan int]()
	if 𝗲𝗿𝗿𝟭 != nil {
		return 𝗲𝗿𝗿𝟭
	}
L:
	select {
	case <-𝘃𝗮𝗹𝟭:
		break L
	}
	return nil
}
func select_with_break1() error {
	𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[chan int]()
	if 𝗲𝗿𝗿𝟭 != nil {
		return 𝗲𝗿𝗿𝟭
	}
Outer:
	select {
	case <-𝘃𝗮𝗹𝟭:
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[chan int]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := ret1Err[chan int]()
		if 𝗲𝗿𝗿𝟯 != nil {
			return 𝗲𝗿𝗿𝟯
		}
	Inner:
		select {
		case <-𝘃𝗮𝗹𝟮:
			break Outer
		case <-𝘃𝗮𝗹𝟯:
			break Inner
		}
	}
	return nil
}
func select_with_goto() error {
L:
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[chan int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		select {
		case <-𝘃𝗮𝗹𝟭:
			goto L
		}
	}
	return nil
}
func select_with_goto1() error {
Outer:
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[chan int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		select {
		case <-𝘃𝗮𝗹𝟭:
		Inner:
			{
				𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[chan int]()
				if 𝗲𝗿𝗿𝟮 != nil {
					return 𝗲𝗿𝗿𝟮
				}
				𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := ret1Err[chan int]()
				if 𝗲𝗿𝗿𝟯 != nil {
					return 𝗲𝗿𝗿𝟯
				}
				select {
				case <-𝘃𝗮𝗹𝟮:
					goto Outer
				case <-𝘃𝗮𝗹𝟯:
					goto Inner
				}
			}
		}
	}
	return nil
}
func select_with_break_goto(a int) error {
𝗟_𝗚𝗼𝘁𝗼_𝗢𝘂𝘁𝗲𝗿𝟭:
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[chan int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
	Outer:
		select {
		case <-𝘃𝗮𝗹𝟭:
		𝗟_𝗚𝗼𝘁𝗼_𝗜𝗻𝗻𝗲𝗿𝟭:
			{
				𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[chan int]()
				if 𝗲𝗿𝗿𝟮 != nil {
					return 𝗲𝗿𝗿𝟮
				}
				𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := ret1Err[chan int]()
				if 𝗲𝗿𝗿𝟯 != nil {
					return 𝗲𝗿𝗿𝟯
				}
				𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟰 := ret1Err[chan int]()
				if 𝗲𝗿𝗿𝟰 != nil {
					return 𝗲𝗿𝗿𝟰
				}
				𝘃𝗮𝗹𝟱, 𝗲𝗿𝗿𝟱 := ret1Err[chan int]()
				if 𝗲𝗿𝗿𝟱 != nil {
					return 𝗲𝗿𝗿𝟱
				}
			Inner:
				select {
				case <-𝘃𝗮𝗹𝟮:
					goto 𝗟_𝗚𝗼𝘁𝗼_𝗢𝘂𝘁𝗲𝗿𝟭
				case <-𝘃𝗮𝗹𝟯:
					goto 𝗟_𝗚𝗼𝘁𝗼_𝗜𝗻𝗻𝗲𝗿𝟭
				case <-𝘃𝗮𝗹𝟰:
					break Outer
				case <-𝘃𝗮𝗹𝟱:
					break Inner
				}
			}
		}
	}
	return nil
}
