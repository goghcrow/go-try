//go:build !try

// Code generated by github.com/goghcrow/go-try DO NOT EDIT.
package test

import (
	"fmt"
	. "github.com/goghcrow/go-try/rt"
	"go/ast"
)

func rewrite_binary_logical_expr() error {
	type X struct{ a int }
	yyy := func(a, b int) bool { return true }
	n := 42
	𝘃𝗮𝗹𝟭 := id(42)
	𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
	if 𝗲𝗿𝗿𝟭 != nil {
		return 𝗲𝗿𝗿𝟭
	}
	𝘃𝗮𝗹𝟯 := yyy(X{𝘃𝗮𝗹𝟭}.a, 𝘃𝗮𝗹𝟮)
	𝘃𝗮𝗹𝟱 := 𝘃𝗮𝗹𝟯 && n > 100
	if 𝘃𝗮𝗹𝟱 {
		𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟮 := ret1Err[bool]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		𝘃𝗮𝗹𝟱 = 𝘃𝗮𝗹𝟰
	}
	if 𝘃𝗮𝗹𝟱 {
		𝘃𝗮𝗹𝟱 = yyy(1, 2)
	}
	if 𝘃𝗮𝗹𝟱 {
		println(1)
	}
	return nil
}
func rewrite_assign_and_value_spec() error {
	type (
		A = int
		B = int
	)
	{
		var a, b int
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[A]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[B]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		a, b = 𝘃𝗮𝗹𝟭, 𝘃𝗮𝗹𝟮
		_, _ = a, b
	}
	{
		𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := ret1Err[A]()
		if 𝗲𝗿𝗿𝟯 != nil {
			return 𝗲𝗿𝗿𝟯
		}
		𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟰 := ret1Err[B]()
		if 𝗲𝗿𝗿𝟰 != nil {
			return 𝗲𝗿𝗿𝟰
		}
		a, b := 𝘃𝗮𝗹𝟯, 𝘃𝗮𝗹𝟰
		_, _ = a, b
	}
	{
		var a, b int
		𝘃𝗮𝗹𝟱 := id[A](42)
		𝘃𝗮𝗹𝟲, 𝗲𝗿𝗿𝟱 := ret1Err[B]()
		if 𝗲𝗿𝗿𝟱 != nil {
			return 𝗲𝗿𝗿𝟱
		}
		a, b = 𝘃𝗮𝗹𝟱, 𝘃𝗮𝗹𝟲
		_, _ = a, b
	}
	{
		𝘃𝗮𝗹𝟳 := id[A](42)
		𝘃𝗮𝗹𝟴, 𝗲𝗿𝗿𝟲 := ret1Err[B]()
		if 𝗲𝗿𝗿𝟲 != nil {
			return 𝗲𝗿𝗿𝟲
		}
		a, b := 𝘃𝗮𝗹𝟳, 𝘃𝗮𝗹𝟴
		_, _ = a, b
	}
	return nil
}
func rewrite_compositelit_expr() error {
	type S struct {
		name string
		age  int
	}
	𝘃𝗮𝗹𝟭 := id[string]("hello")
	𝘃𝗮𝗹𝟮 := id[int](0)
	𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
	if 𝗲𝗿𝗿𝟭 != nil {
		return 𝗲𝗿𝗿𝟭
	}
	_ = S{name: 𝘃𝗮𝗹𝟭, age: 𝘃𝗮𝗹𝟮 + 𝘃𝗮𝗹𝟯}
	𝘃𝗮𝗹𝟰 := id[string]("hello")
	𝘃𝗮𝗹𝟱 := id[int](0)
	𝘃𝗮𝗹𝟲, 𝗲𝗿𝗿𝟮 := ret1Err[int]()
	if 𝗲𝗿𝗿𝟮 != nil {
		return 𝗲𝗿𝗿𝟮
	}
	_ = S{𝘃𝗮𝗹𝟰, 𝘃𝗮𝗹𝟱 + 𝘃𝗮𝗹𝟲}
	return nil
}
func rewrite_return() (a, b int, err error) {
	type (
		A = int
		B = int
	)
	𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[A]()
	if 𝗲𝗿𝗿𝟭 != nil {
		err = 𝗲𝗿𝗿𝟭
		return
	}
	𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[B]()
	if 𝗲𝗿𝗿𝟮 != nil {
		err = 𝗲𝗿𝗿𝟮
		return
	}
	return 𝘃𝗮𝗹𝟭, 𝘃𝗮𝗹𝟮, nil
}
func rewrite_return1() (a, b int, err error) {
	type (
		A = int
		B = int
	)
	𝘃𝗮𝗹𝟭 := id[A](42)
	𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟭 := ret1Err[B]()
	if 𝗲𝗿𝗿𝟭 != nil {
		err = 𝗲𝗿𝗿𝟭
		return
	}
	return 𝘃𝗮𝗹𝟭, 𝘃𝗮𝗹𝟮, nil
}
func rewrite_star_expr() error {
	var ptr *int
	𝘃𝗮𝗹𝟭 := *ptr
	𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
	if 𝗲𝗿𝗿𝟭 != nil {
		return 𝗲𝗿𝗿𝟭
	}
	println(𝘃𝗮𝗹𝟭 + 𝘃𝗮𝗹𝟮)
	return nil
}
func rewrite_slice_expr() error {
	type (
		A = int
		B = int
		C = int
		D = int
	)
	{
		𝘃𝗮𝗹𝟭 := []int{}[100]
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		println(𝘃𝗮𝗹𝟭 + 𝘃𝗮𝗹𝟮)
	}
	{
		𝘃𝗮𝗹𝟯 := []int{}[1:2:3]
		𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟮 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		println(𝘃𝗮𝗹𝟯, 𝘃𝗮𝗹𝟰)
	}
	{
		𝘃𝗮𝗹𝟱, 𝗲𝗿𝗿𝟯 := ret1Err[A]()
		if 𝗲𝗿𝗿𝟯 != nil {
			return 𝗲𝗿𝗿𝟯
		}
		𝘃𝗮𝗹𝟲 := []int{}[1:𝘃𝗮𝗹𝟱:3]
		𝘃𝗮𝗹𝟳, 𝗲𝗿𝗿𝟰 := ret1Err[B]()
		if 𝗲𝗿𝗿𝟰 != nil {
			return 𝗲𝗿𝗿𝟰
		}
		println(𝘃𝗮𝗹𝟲, 𝘃𝗮𝗹𝟳)
	}
	{
		𝘃𝗮𝗹𝟴, 𝗲𝗿𝗿𝟱 := ret1Err[A]()
		if 𝗲𝗿𝗿𝟱 != nil {
			return 𝗲𝗿𝗿𝟱
		}
		𝘃𝗮𝗹𝟵, 𝗲𝗿𝗿𝟲 := ret1Err[B]()
		if 𝗲𝗿𝗿𝟲 != nil {
			return 𝗲𝗿𝗿𝟲
		}
		𝘃𝗮𝗹𝟭𝟬, 𝗲𝗿𝗿𝟳 := ret1Err[C]()
		if 𝗲𝗿𝗿𝟳 != nil {
			return 𝗲𝗿𝗿𝟳
		}
		𝘃𝗮𝗹𝟭𝟭 := []int{}[𝘃𝗮𝗹𝟴:𝘃𝗮𝗹𝟵:𝘃𝗮𝗹𝟭𝟬]
		𝘃𝗮𝗹𝟭𝟮, 𝗲𝗿𝗿𝟴 := ret1Err[D]()
		if 𝗲𝗿𝗿𝟴 != nil {
			return 𝗲𝗿𝗿𝟴
		}
		println(𝘃𝗮𝗹𝟭𝟭, 𝘃𝗮𝗹𝟭𝟮)
	}
	return nil
}
func rewrite_binary_expr() error {
	type (
		fst = int
		snd = int
	)
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := ret1Err[fst]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := ret1Err[snd]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		println(𝘃𝗮𝗹𝟭 + 𝘃𝗮𝗹𝟮)
	}
	{
		𝘃𝗮𝗹𝟯 := return1[int]()
		𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟯 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟯 != nil {
			return 𝗲𝗿𝗿𝟯
		}
		println(𝘃𝗮𝗹𝟯 + 𝘃𝗮𝗹𝟰)
	}
	{
		𝘃𝗮𝗹𝟱 := fmt.Sprintf("")
		𝘃𝗮𝗹𝟲, 𝗲𝗿𝗿𝟰 := ret1Err[string]()
		if 𝗲𝗿𝗿𝟰 != nil {
			return 𝗲𝗿𝗿𝟰
		}
		println(𝘃𝗮𝗹𝟱 + 𝘃𝗮𝗹𝟲)
	}
	{
		var a any
		𝘃𝗮𝗹𝟳 := a.(int)
		𝘃𝗮𝗹𝟴, 𝗲𝗿𝗿𝟱 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟱 != nil {
			return 𝗲𝗿𝗿𝟱
		}
		println(𝘃𝗮𝗹𝟳 + 𝘃𝗮𝗹𝟴)
	}
	return nil
}
func rewrite_call_args() error {
	{
		var a any
		𝘃𝗮𝗹𝟭 := a.(int)
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		println(𝘃𝗮𝗹𝟭, 𝘃𝗮𝗹𝟮)
	}
	return nil
}
func rewrite_index_expr() error {
	{
		var x []int
		𝘃𝗮𝗹𝟭 := x[1]
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟭 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		_ = 𝘃𝗮𝗹𝟭 + 𝘃𝗮𝗹𝟮
	}
	{
		𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟮 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		𝘃𝗮𝗹𝟰 := []int{}[𝘃𝗮𝗹𝟯]
		_ = 𝘃𝗮𝗹𝟰
	}
	{
		𝘃𝗮𝗹𝟱, 𝗲𝗿𝗿𝟯 := ret1Err[[]func(int) int]()
		if 𝗲𝗿𝗿𝟯 != nil {
			return 𝗲𝗿𝗿𝟯
		}
		𝘃𝗮𝗹𝟲, 𝗲𝗿𝗿𝟰 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟰 != nil {
			return 𝗲𝗿𝗿𝟰
		}
		𝘃𝗮𝗹𝟳 := 𝘃𝗮𝗹𝟱[𝘃𝗮𝗹𝟲]
		_ = 𝘃𝗮𝗹𝟳
	}
	{
		𝘃𝗮𝗹𝟴, 𝗲𝗿𝗿𝟱 := ret1Err[[]func(int) int]()
		if 𝗲𝗿𝗿𝟱 != nil {
			return 𝗲𝗿𝗿𝟱
		}
		𝘃𝗮𝗹𝟵, 𝗲𝗿𝗿𝟲 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟲 != nil {
			return 𝗲𝗿𝗿𝟲
		}
		𝘃𝗮𝗹𝟭𝟬 := 𝘃𝗮𝗹𝟴[𝘃𝗮𝗹𝟵]
		𝘃𝗮𝗹𝟭𝟭 := 𝘃𝗮𝗹𝟭𝟬(42)
		𝘃𝗮𝗹𝟭𝟮, 𝗲𝗿𝗿𝟳 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟳 != nil {
			return 𝗲𝗿𝗿𝟳
		}
		_ = 𝘃𝗮𝗹𝟭𝟭 + 𝘃𝗮𝗹𝟭𝟮
	}
	{
		𝘃𝗮𝗹𝟭𝟯 := id[int](42)
		𝘃𝗮𝗹𝟭𝟰, 𝗲𝗿𝗿𝟴 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟴 != nil {
			return 𝗲𝗿𝗿𝟴
		}
		_ = 𝘃𝗮𝗹𝟭𝟯 + 𝘃𝗮𝗹𝟭𝟰
	}
	{
		𝘃𝗮𝗹𝟭𝟱 := []func(){}[0]
		𝘃𝗮𝗹𝟭𝟲, 𝗲𝗿𝗿𝟵 := ret1Err[int]()
		if 𝗲𝗿𝗿𝟵 != nil {
			return 𝗲𝗿𝗿𝟵
		}
		𝘃𝗮𝗹𝟭𝟳 := []func(){}[𝘃𝗮𝗹𝟭𝟲]
		_ = &𝘃𝗮𝗹𝟭𝟱 == &𝘃𝗮𝗹𝟭𝟳
	}
	return nil
}
func rewrite_index1_expr[T int]() (a int, err error) {
	{
		𝘃𝗮𝗹𝟭 := id[T](42)
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟭 := ret1Err[T]()
		if 𝗲𝗿𝗿𝟭 != nil {
			err = 𝗲𝗿𝗿𝟭
			return
		}
		_ = 𝘃𝗮𝗹𝟭 + 𝘃𝗮𝗹𝟮
	}
	{
		𝘃𝗮𝗹𝟯 := []func(){}[0]
		𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟮 := ret1Err[T]()
		if 𝗲𝗿𝗿𝟮 != nil {
			err = 𝗲𝗿𝗿𝟮
			return
		}
		𝘃𝗮𝗹𝟱 := []func(){}[𝘃𝗮𝗹𝟰]
		_ = &𝘃𝗮𝗹𝟯 == &𝘃𝗮𝗹𝟱
	}
	return
}
func rewrite_type_assertion_expr() (err error) {
	{
		var n ast.Node
		𝘃𝗮𝗹𝟭 := n.(*ast.Ident)
		𝘃𝗮𝗹𝟮 := 𝘃𝗮𝗹𝟭.Name
		𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟭 := ret1Err[string]()
		if 𝗲𝗿𝗿𝟭 != nil {
			err = 𝗲𝗿𝗿𝟭
			return
		}
		_ = 𝘃𝗮𝗹𝟮 + " " + 𝘃𝗮𝗹𝟯
	}
	return nil
}
func rewrite_mixed() error {
	type (
		A = int
		B = int
		C = int
	)
	{
		𝘃𝗮𝗹𝟭 := id[int](0)
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟭 := ret1Err[A]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		𝘃𝗮𝗹𝟯 := []func(int) int{}[𝘃𝗮𝗹𝟭+𝘃𝗮𝗹𝟮]
		𝘃𝗮𝗹𝟰 := id[int](1)
		𝘃𝗮𝗹𝟱, 𝗲𝗿𝗿𝟮 := ret1Err[B]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		𝘃𝗮𝗹𝟲 := 𝘃𝗮𝗹𝟯(𝘃𝗮𝗹𝟰 + 𝘃𝗮𝗹𝟱)
		𝘃𝗮𝗹𝟳, 𝗲𝗿𝗿𝟯 := ret1Err[C]()
		if 𝗲𝗿𝗿𝟯 != nil {
			return 𝗲𝗿𝗿𝟯
		}
		𝘃𝗮𝗹𝟴 := id[int](2)
		println(𝘃𝗮𝗹𝟲 + 𝘃𝗮𝗹𝟳 + 𝘃𝗮𝗹𝟴)
	}
	{
		𝘃𝗮𝗹𝟵, 𝗲𝗿𝗿𝟰 := ret1Err[error]()
		if 𝗲𝗿𝗿𝟰 != nil {
			return 𝗲𝗿𝗿𝟰
		}
		𝗲𝗿𝗿𝟱 := 𝘃𝗮𝗹𝟵
		if 𝗲𝗿𝗿𝟱 != nil {
			return 𝗲𝗿𝗿𝟱
		}
	}
	return nil
}
func rewrite_if_init_cond() error {
	{
		n := 1
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := func1[int, bool](n)
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		if 𝘃𝗮𝗹𝟭 {
		}
	}
	{
		n := 0
		{
			n := 1
			𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := func1[int, bool](n)
			if 𝗲𝗿𝗿𝟮 != nil {
				return 𝗲𝗿𝗿𝟮
			}
			if 𝘃𝗮𝗹𝟮 {
				n++
			}
		}
		println(n)
	}
	{
		n := 0
		{
			𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := func1[int, int](42)
			if 𝗲𝗿𝗿𝟯 != nil {
				return 𝗲𝗿𝗿𝟯
			}
			n := 𝘃𝗮𝗹𝟯
			𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟰 := func1[int, bool](n)
			if 𝗲𝗿𝗿𝟰 != nil {
				return 𝗲𝗿𝗿𝟰
			}
			if 𝘃𝗮𝗹𝟰 {
				n++
			}
		}
		println(n)
	}
	return nil
}
func rewrite_for_init_cond() error {
	{
		for i := 0; ; {
			𝗽𝗼𝘀𝘁𝟭 := func() (_ E𝗿𝗿𝗼𝗿) {
				_, 𝗲𝗿𝗿𝟭 := func1[int, int](i)
				if 𝗲𝗿𝗿𝟭 != nil {
					return 𝗲𝗿𝗿𝟭
				}
				return
			}
			𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := func1[int, bool](i)
			if 𝗲𝗿𝗿𝟭 != nil {
				return 𝗲𝗿𝗿𝟭
			}
			if !𝘃𝗮𝗹𝟭 {
				break
			}
			i++
			𝗲𝗿𝗿𝟮 := 𝗽𝗼𝘀𝘁𝟭()
			if 𝗲𝗿𝗿𝟮 != nil {
				return 𝗲𝗿𝗿𝟮
			}
		}
	}
	{
		i := 0
		for i := 0; ; {
			𝗽𝗼𝘀𝘁𝟮 := func() (_ E𝗿𝗿𝗼𝗿) {
				_, 𝗲𝗿𝗿𝟭 := func1[int, int](i)
				if 𝗲𝗿𝗿𝟭 != nil {
					return 𝗲𝗿𝗿𝟭
				}
				return
			}
			𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟯 := func1[int, bool](i)
			if 𝗲𝗿𝗿𝟯 != nil {
				return 𝗲𝗿𝗿𝟯
			}
			if !𝘃𝗮𝗹𝟮 {
				break
			}
			i++
			𝗲𝗿𝗿𝟰 := 𝗽𝗼𝘀𝘁𝟮()
			if 𝗲𝗿𝗿𝟰 != nil {
				return 𝗲𝗿𝗿𝟰
			}
		}
		println(i)
	}
	{
		i := 0
		𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟱 := func1[int, int](42)
		if 𝗲𝗿𝗿𝟱 != nil {
			return 𝗲𝗿𝗿𝟱
		}
		for i := 𝘃𝗮𝗹𝟯; ; {
			𝗽𝗼𝘀𝘁𝟯 := func() (_ E𝗿𝗿𝗼𝗿) {
				_, 𝗲𝗿𝗿𝟭 := func1[int, int](i)
				if 𝗲𝗿𝗿𝟭 != nil {
					return 𝗲𝗿𝗿𝟭
				}
				return
			}
			𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟲 := func1[int, bool](i)
			if 𝗲𝗿𝗿𝟲 != nil {
				return 𝗲𝗿𝗿𝟲
			}
			if !𝘃𝗮𝗹𝟰 {
				break
			}
			i++
			𝗲𝗿𝗿𝟳 := 𝗽𝗼𝘀𝘁𝟯()
			if 𝗲𝗿𝗿𝟳 != nil {
				return 𝗲𝗿𝗿𝟳
			}
		}
		println(i)
	}
	return nil
}
func rewrite_typeswitch_init_assign() error {
	{
		n := 1
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := func1[int, fmt.Stringer](n)
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		switch 𝘃𝗮𝗹𝟭.(type) {
		}
	}
	{
		n := 0
		{
			n := 1
			𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := func1[int, fmt.Stringer](n)
			if 𝗲𝗿𝗿𝟮 != nil {
				return 𝗲𝗿𝗿𝟮
			}
			switch 𝘃𝗮𝗹𝟮.(type) {
			default:
				n++
			}
		}
		println(n)
	}
	{
		n := 0
		{
			𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := ret1Err[int]()
			if 𝗲𝗿𝗿𝟯 != nil {
				return 𝗲𝗿𝗿𝟯
			}
			n := 𝘃𝗮𝗹𝟯
			𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟰 := func1[int, fmt.Stringer](n)
			if 𝗲𝗿𝗿𝟰 != nil {
				return 𝗲𝗿𝗿𝟰
			}
			switch 𝘃𝗮𝗹𝟰.(type) {
			default:
				n++
			}
		}
		println(n)
	}
	return nil
}
func rewrite_switch_init_tag() error {
	{
		n := 1
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := func1[int, fmt.Stringer](n)
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		switch 𝘃𝗮𝗹𝟭 {
		}
	}
	{
		n := 0
		{
			n := 1
			𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := func1[int, fmt.Stringer](n)
			if 𝗲𝗿𝗿𝟮 != nil {
				return 𝗲𝗿𝗿𝟮
			}
			switch 𝘃𝗮𝗹𝟮 {
			default:
				n++
			}
		}
		println(n)
	}
	{
		n := 0
		{
			𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := ret1Err[int]()
			if 𝗲𝗿𝗿𝟯 != nil {
				return 𝗲𝗿𝗿𝟯
			}
			n := 𝘃𝗮𝗹𝟯
			𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟰 := func1[int, fmt.Stringer](n)
			if 𝗲𝗿𝗿𝟰 != nil {
				return 𝗲𝗿𝗿𝟰
			}
			switch 𝘃𝗮𝗹𝟰 {
			default:
				n++
			}
		}
		println(n)
	}
	return nil
}
