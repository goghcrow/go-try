//go:build !try

// Code generated by github.com/goghcrow/go-try DO NOT EDIT.
package test

import "go/ast"

func rewrite_selector_expr() error {
	type X struct{ x string }
	{
		var x *X
		𝘃𝗮𝗹𝟭 := x.x
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟭 := func1[int, string](2)
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		_ = 𝘃𝗮𝗹𝟭 + 𝘃𝗮𝗹𝟮
	}
	{
		𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟮 := ret1Err[*X]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		𝘃𝗮𝗹𝟰 := 𝘃𝗮𝗹𝟯.x
		𝘃𝗮𝗹𝟱, 𝗲𝗿𝗿𝟯 := ret1Err[string]()
		if 𝗲𝗿𝗿𝟯 != nil {
			return 𝗲𝗿𝗿𝟯
		}
		println(𝘃𝗮𝗹𝟰 + 𝘃𝗮𝗹𝟱)
	}
	{
		𝘃𝗮𝗹𝟲, 𝗲𝗿𝗿𝟰 := ret1Err[X]()
		if 𝗲𝗿𝗿𝟰 != nil {
			return 𝗲𝗿𝗿𝟰
		}
		𝘃𝗮𝗹𝟳, 𝗲𝗿𝗿𝟱 := ret1Err[string]()
		if 𝗲𝗿𝗿𝟱 != nil {
			return 𝗲𝗿𝗿𝟱
		}
		println(𝘃𝗮𝗹𝟲.x + 𝘃𝗮𝗹𝟳)
	}
	return nil
}
func rewrite_ptr_selector_expr() error {
	var x *ast.CallExpr
	{
		𝘃𝗮𝗹𝟭 := x.Args
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟭 := ret1Err[string]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		consume2(𝘃𝗮𝗹𝟭, 𝘃𝗮𝗹𝟮)
	}
	{
		𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟮 := ret1Err[string]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		consume2(x.Pos, 𝘃𝗮𝗹𝟯)
	}
	{
		𝘃𝗮𝗹𝟰 := x.Pos()
		𝘃𝗮𝗹𝟱, 𝗲𝗿𝗿𝟯 := ret1Err[string]()
		if 𝗲𝗿𝗿𝟯 != nil {
			return 𝗲𝗿𝗿𝟯
		}
		consume2(𝘃𝗮𝗹𝟰, 𝘃𝗮𝗹𝟱)
	}
	return nil
}
func rewrite_iface_selector_expr() error {
	var x ast.Node
	{
		𝘃𝗮𝗹𝟭 := x.Pos
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟭 := ret1Err[string]()
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		consume2(𝘃𝗮𝗹𝟭, 𝘃𝗮𝗹𝟮)
	}
	{
		𝘃𝗮𝗹𝟯 := x.Pos()
		𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟮 := ret1Err[string]()
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		consume2(𝘃𝗮𝗹𝟯, 𝘃𝗮𝗹𝟰)
	}
	return nil
}
