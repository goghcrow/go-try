//go:build !try

// Code generated by github.com/goghcrow/go-try DO NOT EDIT.
package test

func logical_or() error {
	{
		_ = id(true) || id(false)
	}
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := func1[int, bool](1)
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		if !𝘃𝗮𝗹𝟭 {
			𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := func1[int, bool](2)
			if 𝗲𝗿𝗿𝟮 != nil {
				return 𝗲𝗿𝗿𝟮
			}
			𝘃𝗮𝗹𝟭 = 𝘃𝗮𝗹𝟮
		}
		_ = 𝘃𝗮𝗹𝟭
	}
	{
		𝘃𝗮𝗹𝟯 := id(true)
		if !𝘃𝗮𝗹𝟯 {
			𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟯 := func1[int, bool](2)
			if 𝗲𝗿𝗿𝟯 != nil {
				return 𝗲𝗿𝗿𝟯
			}
			𝘃𝗮𝗹𝟯 = 𝘃𝗮𝗹𝟰
		}
		_ = 𝘃𝗮𝗹𝟯
	}
	{
		𝘃𝗮𝗹𝟱 := id(true)
		if !𝘃𝗮𝗹𝟱 {
			𝘃𝗮𝗹𝟱 = id(false)
		}
		if !𝘃𝗮𝗹𝟱 {
			𝘃𝗮𝗹𝟳, 𝗲𝗿𝗿𝟰 := func1[int, bool](2)
			if 𝗲𝗿𝗿𝟰 != nil {
				return 𝗲𝗿𝗿𝟰
			}
			𝘃𝗮𝗹𝟱 = 𝘃𝗮𝗹𝟳
		}
		_ = 𝘃𝗮𝗹𝟱
	}
	{
		𝘃𝗮𝗹𝟴 := id(true)
		if !𝘃𝗮𝗹𝟴 {
			𝘃𝗮𝗹𝟵, 𝗲𝗿𝗿𝟱 := func1[int, bool](1)
			if 𝗲𝗿𝗿𝟱 != nil {
				return 𝗲𝗿𝗿𝟱
			}
			𝘃𝗮𝗹𝟴 = 𝘃𝗮𝗹𝟵
		}
		if !𝘃𝗮𝗹𝟴 {
			𝘃𝗮𝗹𝟭𝟬, 𝗲𝗿𝗿𝟲 := func1[int, bool](2)
			if 𝗲𝗿𝗿𝟲 != nil {
				return 𝗲𝗿𝗿𝟲
			}
			𝘃𝗮𝗹𝟴 = 𝘃𝗮𝗹𝟭𝟬
		}
		_ = 𝘃𝗮𝗹𝟴
	}
	{
		𝘃𝗮𝗹𝟭𝟭 := id(true)
		if !𝘃𝗮𝗹𝟭𝟭 {
			𝘃𝗮𝗹𝟭𝟮, 𝗲𝗿𝗿𝟳 := func1[int, bool](2)
			if 𝗲𝗿𝗿𝟳 != nil {
				return 𝗲𝗿𝗿𝟳
			}
			𝘃𝗮𝗹𝟭𝟭 = 𝘃𝗮𝗹𝟭𝟮
		}
		if !𝘃𝗮𝗹𝟭𝟭 {
			𝘃𝗮𝗹𝟭𝟭 = id(false)
		}
		_ = 𝘃𝗮𝗹𝟭𝟭
	}
	return nil
}
func logical_and() error {
	{
		_ = id(true) && id(false)
	}
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := func1[int, bool](1)
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		if 𝘃𝗮𝗹𝟭 {
			𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := func1[int, bool](2)
			if 𝗲𝗿𝗿𝟮 != nil {
				return 𝗲𝗿𝗿𝟮
			}
			𝘃𝗮𝗹𝟭 = 𝘃𝗮𝗹𝟮
		}
		_ = 𝘃𝗮𝗹𝟭
	}
	{
		𝘃𝗮𝗹𝟯 := id(true)
		if 𝘃𝗮𝗹𝟯 {
			𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟯 := func1[int, bool](2)
			if 𝗲𝗿𝗿𝟯 != nil {
				return 𝗲𝗿𝗿𝟯
			}
			𝘃𝗮𝗹𝟯 = 𝘃𝗮𝗹𝟰
		}
		_ = 𝘃𝗮𝗹𝟯
	}
	{
		𝘃𝗮𝗹𝟱 := id(true)
		if 𝘃𝗮𝗹𝟱 {
			𝘃𝗮𝗹𝟱 = id(false)
		}
		if 𝘃𝗮𝗹𝟱 {
			𝘃𝗮𝗹𝟳, 𝗲𝗿𝗿𝟰 := func1[int, bool](2)
			if 𝗲𝗿𝗿𝟰 != nil {
				return 𝗲𝗿𝗿𝟰
			}
			𝘃𝗮𝗹𝟱 = 𝘃𝗮𝗹𝟳
		}
		_ = 𝘃𝗮𝗹𝟱
	}
	{
		𝘃𝗮𝗹𝟴 := id(true)
		if 𝘃𝗮𝗹𝟴 {
			𝘃𝗮𝗹𝟵, 𝗲𝗿𝗿𝟱 := func1[int, bool](1)
			if 𝗲𝗿𝗿𝟱 != nil {
				return 𝗲𝗿𝗿𝟱
			}
			𝘃𝗮𝗹𝟴 = 𝘃𝗮𝗹𝟵
		}
		if 𝘃𝗮𝗹𝟴 {
			𝘃𝗮𝗹𝟭𝟬, 𝗲𝗿𝗿𝟲 := func1[int, bool](2)
			if 𝗲𝗿𝗿𝟲 != nil {
				return 𝗲𝗿𝗿𝟲
			}
			𝘃𝗮𝗹𝟴 = 𝘃𝗮𝗹𝟭𝟬
		}
		_ = 𝘃𝗮𝗹𝟴
	}
	{
		𝘃𝗮𝗹𝟭𝟭 := id(true)
		if 𝘃𝗮𝗹𝟭𝟭 {
			𝘃𝗮𝗹𝟭𝟮, 𝗲𝗿𝗿𝟳 := func1[int, bool](2)
			if 𝗲𝗿𝗿𝟳 != nil {
				return 𝗲𝗿𝗿𝟳
			}
			𝘃𝗮𝗹𝟭𝟭 = 𝘃𝗮𝗹𝟭𝟮
		}
		if 𝘃𝗮𝗹𝟭𝟭 {
			𝘃𝗮𝗹𝟭𝟭 = id(false)
		}
		_ = 𝘃𝗮𝗹𝟭𝟭
	}
	return nil
}
func logical_and_or() error {
	{
		𝘃𝗮𝗹𝟭 := id(true)
		if 𝘃𝗮𝗹𝟭 {
			𝘃𝗮𝗹𝟭 = id(false)
		}
		if !𝘃𝗮𝗹𝟭 {
			𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟭 := func1[int, bool](2)
			if 𝗲𝗿𝗿𝟭 != nil {
				return 𝗲𝗿𝗿𝟭
			}
			𝘃𝗮𝗹𝟭 = 𝘃𝗮𝗹𝟯
		}
		_ = 𝘃𝗮𝗹𝟭
	}
	{
		𝘃𝗮𝗹𝟰 := id(true)
		if 𝘃𝗮𝗹𝟰 {
			𝘃𝗮𝗹𝟱 := id(false)
			if !𝘃𝗮𝗹𝟱 {
				𝘃𝗮𝗹𝟲, 𝗲𝗿𝗿𝟮 := func1[int, bool](2)
				if 𝗲𝗿𝗿𝟮 != nil {
					return 𝗲𝗿𝗿𝟮
				}
				𝘃𝗮𝗹𝟱 = 𝘃𝗮𝗹𝟲
			}
			𝘃𝗮𝗹𝟰 = 𝘃𝗮𝗹𝟱
		}
		_ = 𝘃𝗮𝗹𝟰
	}
	{
		𝘃𝗮𝗹𝟳 := id(true)
		if !𝘃𝗮𝗹𝟳 {
			𝘃𝗮𝗹𝟴, 𝗲𝗿𝗿𝟯 := func1[int, bool](1)
			if 𝗲𝗿𝗿𝟯 != nil {
				return 𝗲𝗿𝗿𝟯
			}
			if 𝘃𝗮𝗹𝟴 {
				𝘃𝗮𝗹𝟵, 𝗲𝗿𝗿𝟰 := func1[int, bool](2)
				if 𝗲𝗿𝗿𝟰 != nil {
					return 𝗲𝗿𝗿𝟰
				}
				𝘃𝗮𝗹𝟴 = 𝘃𝗮𝗹𝟵
			}
			𝘃𝗮𝗹𝟳 = 𝘃𝗮𝗹𝟴
		}
		_ = 𝘃𝗮𝗹𝟳
	}
	{
		𝘃𝗮𝗹𝟭𝟬 := id(true)
		if !𝘃𝗮𝗹𝟭𝟬 {
			𝘃𝗮𝗹𝟭𝟭, 𝗲𝗿𝗿𝟱 := func1[int, bool](1)
			if 𝗲𝗿𝗿𝟱 != nil {
				return 𝗲𝗿𝗿𝟱
			}
			𝘃𝗮𝗹𝟭𝟬 = 𝘃𝗮𝗹𝟭𝟭
		}
		𝘃𝗮𝗹𝟭𝟯 := 𝘃𝗮𝗹𝟭𝟬
		if 𝘃𝗮𝗹𝟭𝟯 {
			𝘃𝗮𝗹𝟭𝟮, 𝗲𝗿𝗿𝟲 := func1[int, bool](2)
			if 𝗲𝗿𝗿𝟲 != nil {
				return 𝗲𝗿𝗿𝟲
			}
			𝘃𝗮𝗹𝟭𝟯 = 𝘃𝗮𝗹𝟭𝟮
		}
		_ = 𝘃𝗮𝗹𝟭𝟯
	}
	return nil
}
func logical_special_case0() error {
	{
		𝘃𝗮𝗹𝟭 := []int{}[0]
		𝘃𝗮𝗹𝟯 := 𝘃𝗮𝗹𝟭 > 0
		if !𝘃𝗮𝗹𝟯 {
			𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟭 := func1[int, bool](1)
			if 𝗲𝗿𝗿𝟭 != nil {
				return 𝗲𝗿𝗿𝟭
			}
			𝘃𝗮𝗹𝟯 = 𝘃𝗮𝗹𝟮
		}
		_ = 𝘃𝗮𝗹𝟯
	}
	{
		𝘃𝗮𝗹𝟰 := (&(struct{ a int }{})).a
		𝘃𝗮𝗹𝟲 := 𝘃𝗮𝗹𝟰 > 0
		if !𝘃𝗮𝗹𝟲 {
			𝘃𝗮𝗹𝟱, 𝗲𝗿𝗿𝟮 := func1[int, bool](1)
			if 𝗲𝗿𝗿𝟮 != nil {
				return 𝗲𝗿𝗿𝟮
			}
			𝘃𝗮𝗹𝟲 = 𝘃𝗮𝗹𝟱
		}
		_ = 𝘃𝗮𝗹𝟲
	}
	{
		𝘃𝗮𝗹𝟳, 𝗲𝗿𝗿𝟯 := func1[int, bool](1)
		if 𝗲𝗿𝗿𝟯 != nil {
			return 𝗲𝗿𝗿𝟯
		}
		_ = struct{ a int }{}.a > 0 || 𝘃𝗮𝗹𝟳
	}
	{
		var a any
		𝘃𝗮𝗹𝟴 := a.(bool)
		if !𝘃𝗮𝗹𝟴 {
			𝘃𝗮𝗹𝟵, 𝗲𝗿𝗿𝟰 := func1[int, bool](1)
			if 𝗲𝗿𝗿𝟰 != nil {
				return 𝗲𝗿𝗿𝟰
			}
			𝘃𝗮𝗹𝟴 = 𝘃𝗮𝗹𝟵
		}
		_ = 𝘃𝗮𝗹𝟴
	}
	{
		var a *bool
		𝘃𝗮𝗹𝟭𝟬 := *a
		if !𝘃𝗮𝗹𝟭𝟬 {
			𝘃𝗮𝗹𝟭𝟭, 𝗲𝗿𝗿𝟱 := func1[int, bool](1)
			if 𝗲𝗿𝗿𝟱 != nil {
				return 𝗲𝗿𝗿𝟱
			}
			𝘃𝗮𝗹𝟭𝟬 = 𝘃𝗮𝗹𝟭𝟭
		}
		_ = 𝘃𝗮𝗹𝟭𝟬
	}
	return nil
}
func logical_special_case() error {
	{
		𝘃𝗮𝗹𝟭, 𝗲𝗿𝗿𝟭 := func1[int, bool](1)
		if 𝗲𝗿𝗿𝟭 != nil {
			return 𝗲𝗿𝗿𝟭
		}
		_ = 1 == 1 || 𝘃𝗮𝗹𝟭
	}
	{
		𝘃𝗮𝗹𝟮, 𝗲𝗿𝗿𝟮 := func1[int, bool](1)
		if 𝗲𝗿𝗿𝟮 != nil {
			return 𝗲𝗿𝗿𝟮
		}
		_ = 𝘃𝗮𝗹𝟮 || 1 == 1
	}
	{
		𝘃𝗮𝗹𝟯, 𝗲𝗿𝗿𝟯 := func1[int, bool](1)
		if 𝗲𝗿𝗿𝟯 != nil {
			return 𝗲𝗿𝗿𝟯
		}
		_ = 1 == 1 && 𝘃𝗮𝗹𝟯
	}
	{
		𝘃𝗮𝗹𝟰, 𝗲𝗿𝗿𝟰 := func1[int, bool](1)
		if 𝗲𝗿𝗿𝟰 != nil {
			return 𝗲𝗿𝗿𝟰
		}
		_ = 𝘃𝗮𝗹𝟰 && 1 == 1
	}
	{
		𝘃𝗮𝗹𝟱, 𝗲𝗿𝗿𝟱 := func1[int, bool](2)
		if 𝗲𝗿𝗿𝟱 != nil {
			return 𝗲𝗿𝗿𝟱
		}
		_ = 1 == 1 || 1 == 1 && 𝘃𝗮𝗹𝟱
	}
	{
		𝘃𝗮𝗹𝟲, 𝗲𝗿𝗿𝟲 := func1[int, bool](1)
		if 𝗲𝗿𝗿𝟲 != nil {
			return 𝗲𝗿𝗿𝟲
		}
		𝘃𝗮𝗹𝟴 := 𝘃𝗮𝗹𝟲 || 1 == 1
		if !𝘃𝗮𝗹𝟴 {
			𝘃𝗮𝗹𝟳, 𝗲𝗿𝗿𝟳 := func1[int, bool](2)
			if 𝗲𝗿𝗿𝟳 != nil {
				return 𝗲𝗿𝗿𝟳
			}
			𝘃𝗮𝗹𝟴 = 𝘃𝗮𝗹𝟳
		}
		_ = 𝘃𝗮𝗹𝟴
	}
	return nil
}
