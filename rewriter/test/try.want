//go:build !try

// Code generated by github.com/goghcrow/go-try DO NOT EDIT.
package test

import (
	"errors"
	"fmt"
)

func Result[V any](v V) (_ V, _ error) { return }

func TestName() (int, error) {
	if true {
		𝘃𝗮𝗹1, 𝐞𝐫𝐫2 := a()
		if 𝐞𝐫𝐫2 != nil {
			return 𝘃𝗮𝗹1, 𝐞𝐫𝐫2
		}
		println(𝘃𝗮𝗹1)
	}

	for {
		𝘃𝗮𝗹3, 𝐞𝐫𝐫4 := a()
		if 𝐞𝐫𝐫4 != nil {
			return 𝘃𝗮𝗹3, 𝐞𝐫𝐫4
		}
		println(𝘃𝗮𝗹3)
	}

	switch {
	case true:
		𝘃𝗮𝗹5, 𝐞𝐫𝐫6 := a()
		if 𝐞𝐫𝐫6 != nil {
			return 𝘃𝗮𝗹5, 𝐞𝐫𝐫6
		}
		println(𝘃𝗮𝗹5)
	}

	var NIL any
	switch NIL.(type) {
	case int:
		𝘃𝗮𝗹7, 𝐞𝐫𝐫8 := a()
		if 𝐞𝐫𝐫8 != nil {
			return 𝘃𝗮𝗹7, 𝐞𝐫𝐫8
		}
		println(𝘃𝗮𝗹7)
	}
	𝘃𝗮𝗹9, 𝐞𝐫𝐫10 := a()
	if 𝐞𝐫𝐫10 != nil {
		return 𝘃𝗮𝗹9, 𝐞𝐫𝐫10
	}
	v := 𝘃𝗮𝗹9
	𝘃𝗮𝗹11, 𝐞𝐫𝐫12 := a()
	if 𝐞𝐫𝐫12 != nil {
		return 𝘃𝗮𝗹11, 𝐞𝐫𝐫12
	}
	v = 𝘃𝗮𝗹11
	fmt.Println(v)
	𝘃𝗮𝗹13, 𝐞𝐫𝐫14 := a()
	if 𝐞𝐫𝐫14 != nil {
		return 𝘃𝗮𝗹13, 𝐞𝐫𝐫14
	}
	println(𝘃𝗮𝗹13 + 1)
	𝘃𝗮𝗹15, 𝐞𝐫𝐫16 := 42, errors.New("error")
	if 𝐞𝐫𝐫16 != nil {
		return 𝘃𝗮𝗹15, 𝐞𝐫𝐫16
	}
	v1, v2 := 𝘃𝗮𝗹15, 42
	println(v1)
	println(v2)
	𝘃𝗮𝗹17, 𝐞𝐫𝐫18 := func() (int, error) {
		𝘃𝗮𝗹1, 𝐞𝐫𝐫2 := a()
		if 𝐞𝐫𝐫2 != nil {
			return 𝘃𝗮𝗹1, 𝐞𝐫𝐫2
		}
		return 𝘃𝗮𝗹1 + 1, nil
	}()
	if 𝐞𝐫𝐫18 != nil {
		return 𝘃𝗮𝗹17, 𝐞𝐫𝐫18
	}
	x := 𝘃𝗮𝗹17

	println(x)

	return 42, errors.New("")
}

func x() (int, error) {

	v, err_gen_sym1 := a()
	if err_gen_sym1 != nil {
		return v, err_gen_sym1
	}

	// 如果是赋值
	var err_gen_sym2 error
	v, err_gen_sym2 = a()
	if err_gen_sym2 != nil {
		return v, err_gen_sym2
	}

	v_gen_sym1, err_gen_sym3 := a()
	if err_gen_sym3 != nil {
		return v_gen_sym1, err_gen_sym3
	}

	println(v_gen_sym1 + 1)

	return Result(42)
}

func a() (int, error) {
	return 1, nil
}

func b(_ int) (int, error) {
	return 1, errors.New("error")
}
